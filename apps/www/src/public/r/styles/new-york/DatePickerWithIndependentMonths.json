{
  "name": "DatePickerWithIndependentMonths",
  "type": "registry:example",
  "dependencies": [
    "reka-ui"
  ],
  "registryDependencies": [
    "button",
    "popover",
    "range-calendar"
  ],
  "files": [
    {
      "path": "examples/DatePickerWithIndependentMonths.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { DateValue } from \"@internationalized/date\"\r\nimport type { DateRange } from \"reka-ui\"\r\n\r\nimport type { Grid } from \"reka-ui/date\"\r\nimport type { Ref } from \"vue\"\r\nimport {\r\n  CalendarDate,\r\n\r\n  isEqualMonth,\r\n} from \"@internationalized/date\"\r\n\r\nimport {\r\n  Calendar,\r\n  ChevronLeft,\r\n  ChevronRight,\r\n} from \"lucide-vue-next\"\r\nimport { RangeCalendarRoot, useDateFormatter } from \"reka-ui\"\r\nimport { createMonth, toDate } from \"reka-ui/date\"\r\nimport { ref, watch } from \"vue\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Button, buttonVariants } from \"@/registry/new-york/ui/button\"\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/registry/new-york/ui/popover\"\r\nimport {\r\n  RangeCalendarCell,\r\n  RangeCalendarCellTrigger,\r\n  RangeCalendarGrid,\r\n  RangeCalendarGridBody,\r\n  RangeCalendarGridHead,\r\n  RangeCalendarGridRow,\r\n  RangeCalendarHeadCell,\r\n} from \"@/registry/new-york/ui/range-calendar\"\r\n\r\nconst value = ref({\r\n  start: new CalendarDate(2022, 1, 20),\r\n  end: new CalendarDate(2022, 1, 20).add({ days: 20 }),\r\n}) as Ref<DateRange>\r\n\r\nconst locale = ref(\"en-US\")\r\nconst formatter = useDateFormatter(locale.value)\r\n\r\nconst placeholder = ref(value.value.start) as Ref<DateValue>\r\nconst secondMonthPlaceholder = ref(value.value.end) as Ref<DateValue>\r\n\r\nconst firstMonth = ref(\r\n  createMonth({\r\n    dateObj: placeholder.value,\r\n    locale: locale.value,\r\n    fixedWeeks: true,\r\n    weekStartsOn: 0,\r\n  }),\r\n) as Ref<Grid<DateValue>>\r\nconst secondMonth = ref(\r\n  createMonth({\r\n    dateObj: secondMonthPlaceholder.value,\r\n    locale: locale.value,\r\n    fixedWeeks: true,\r\n    weekStartsOn: 0,\r\n  }),\r\n) as Ref<Grid<DateValue>>\r\n\r\nfunction updateMonth(reference: \"first\" | \"second\", months: number) {\r\n  if (reference === \"first\") {\r\n    placeholder.value = placeholder.value.add({ months })\r\n  }\r\n  else {\r\n    secondMonthPlaceholder.value = secondMonthPlaceholder.value.add({\r\n      months,\r\n    })\r\n  }\r\n}\r\n\r\nwatch(placeholder, (_placeholder) => {\r\n  firstMonth.value = createMonth({\r\n    dateObj: _placeholder,\r\n    weekStartsOn: 0,\r\n    fixedWeeks: false,\r\n    locale: locale.value,\r\n  })\r\n  if (isEqualMonth(secondMonthPlaceholder.value, _placeholder)) {\r\n    secondMonthPlaceholder.value = secondMonthPlaceholder.value.add({\r\n      months: 1,\r\n    })\r\n  }\r\n})\r\n\r\nwatch(secondMonthPlaceholder, (_secondMonthPlaceholder) => {\r\n  secondMonth.value = createMonth({\r\n    dateObj: _secondMonthPlaceholder,\r\n    weekStartsOn: 0,\r\n    fixedWeeks: false,\r\n    locale: locale.value,\r\n  })\r\n  if (isEqualMonth(_secondMonthPlaceholder, placeholder.value))\r\n    placeholder.value = placeholder.value.subtract({ months: 1 })\r\n})\r\n</script>\r\n\r\n<template>\r\n  <Popover>\r\n    <PopoverTrigger as-child>\r\n      <Button\r\n        variant=\"outline\"\r\n        :class=\"\r\n          cn(\r\n            'w-[280px] justify-start text-left font-normal',\r\n            !value && 'text-muted-foreground',\r\n          )\r\n        \"\r\n      >\r\n        <Calendar class=\"mr-2 h-4 w-4\" />\r\n        <template v-if=\"value.start\">\r\n          <template v-if=\"value.end\">\r\n            {{\r\n              formatter.custom(toDate(value.start), {\r\n                dateStyle: \"medium\",\r\n              })\r\n            }}\r\n            -\r\n            {{\r\n              formatter.custom(toDate(value.end), {\r\n                dateStyle: \"medium\",\r\n              })\r\n            }}\r\n          </template>\r\n\r\n          <template v-else>\r\n            {{\r\n              formatter.custom(toDate(value.start), {\r\n                dateStyle: \"medium\",\r\n              })\r\n            }}\r\n          </template>\r\n        </template>\r\n        <template v-else>\r\n          Pick a date\r\n        </template>\r\n      </Button>\r\n    </PopoverTrigger>\r\n    <PopoverContent class=\"w-auto p-0\">\r\n      <RangeCalendarRoot v-slot=\"{ weekDays }\" v-model=\"value\" v-model:placeholder=\"placeholder\" class=\"p-3\">\r\n        <div\r\n          class=\"flex flex-col gap-y-4 mt-4 sm:flex-row sm:gap-x-4 sm:gap-y-0\"\r\n        >\r\n          <div class=\"flex flex-col gap-4\">\r\n            <div class=\"flex items-center justify-between\">\r\n              <button\r\n                :class=\"\r\n                  cn(\r\n                    buttonVariants({ variant: 'outline' }),\r\n                    'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100',\r\n                  )\r\n                \"\r\n                @click=\"updateMonth('first', -1)\"\r\n              >\r\n                <ChevronLeft class=\"h-4 w-4\" />\r\n              </button>\r\n              <div :class=\"cn('text-sm font-medium')\">\r\n                {{\r\n                  formatter.fullMonthAndYear(\r\n                    toDate(firstMonth.value),\r\n                  )\r\n                }}\r\n              </div>\r\n              <button\r\n                :class=\"\r\n                  cn(\r\n                    buttonVariants({ variant: 'outline' }),\r\n                    'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100',\r\n                  )\r\n                \"\r\n                @click=\"updateMonth('first', 1)\"\r\n              >\r\n                <ChevronRight class=\"h-4 w-4\" />\r\n              </button>\r\n            </div>\r\n            <RangeCalendarGrid>\r\n              <RangeCalendarGridHead>\r\n                <RangeCalendarGridRow>\r\n                  <RangeCalendarHeadCell\r\n                    v-for=\"day in weekDays\"\r\n                    :key=\"day\"\r\n                    class=\"w-full\"\r\n                  >\r\n                    {{ day }}\r\n                  </RangeCalendarHeadCell>\r\n                </RangeCalendarGridRow>\r\n              </RangeCalendarGridHead>\r\n              <RangeCalendarGridBody>\r\n                <RangeCalendarGridRow\r\n                  v-for=\"(\r\n                    weekDates, index\r\n                  ) in firstMonth.rows\"\r\n                  :key=\"`weekDate-${index}`\"\r\n                  class=\"mt-2 w-full\"\r\n                >\r\n                  <RangeCalendarCell\r\n                    v-for=\"weekDate in weekDates\"\r\n                    :key=\"weekDate.toString()\"\r\n                    :date=\"weekDate\"\r\n                  >\r\n                    <RangeCalendarCellTrigger\r\n                      :day=\"weekDate\"\r\n                      :month=\"firstMonth.value\"\r\n                    />\r\n                  </RangeCalendarCell>\r\n                </RangeCalendarGridRow>\r\n              </RangeCalendarGridBody>\r\n            </RangeCalendarGrid>\r\n          </div>\r\n          <div class=\"flex flex-col gap-4\">\r\n            <div class=\"flex items-center justify-between\">\r\n              <button\r\n                :class=\"\r\n                  cn(\r\n                    buttonVariants({ variant: 'outline' }),\r\n                    'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100',\r\n                  )\r\n                \"\r\n                @click=\"updateMonth('second', -1)\"\r\n              >\r\n                <ChevronLeft class=\"h-4 w-4\" />\r\n              </button>\r\n              <div :class=\"cn('text-sm font-medium')\">\r\n                {{\r\n                  formatter.fullMonthAndYear(\r\n                    toDate(secondMonth.value),\r\n                  )\r\n                }}\r\n              </div>\r\n\r\n              <button\r\n                :class=\"\r\n                  cn(\r\n                    buttonVariants({ variant: 'outline' }),\r\n                    'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100',\r\n                  )\r\n                \"\r\n                @click=\"updateMonth('second', 1)\"\r\n              >\r\n                <ChevronRight class=\"h-4 w-4\" />\r\n              </button>\r\n            </div>\r\n            <RangeCalendarGrid>\r\n              <RangeCalendarGridHead>\r\n                <RangeCalendarGridRow>\r\n                  <RangeCalendarHeadCell\r\n                    v-for=\"day in weekDays\"\r\n                    :key=\"day\"\r\n                    class=\"w-full\"\r\n                  >\r\n                    {{ day }}\r\n                  </RangeCalendarHeadCell>\r\n                </RangeCalendarGridRow>\r\n              </RangeCalendarGridHead>\r\n              <RangeCalendarGridBody>\r\n                <RangeCalendarGridRow\r\n                  v-for=\"(\r\n                    weekDates, index\r\n                  ) in secondMonth.rows\"\r\n                  :key=\"`weekDate-${index}`\"\r\n                  class=\"mt-2 w-full\"\r\n                >\r\n                  <RangeCalendarCell\r\n                    v-for=\"weekDate in weekDates\"\r\n                    :key=\"weekDate.toString()\"\r\n                    :date=\"weekDate\"\r\n                  >\r\n                    <RangeCalendarCellTrigger\r\n                      :day=\"weekDate\"\r\n                      :month=\"secondMonth.value\"\r\n                    />\r\n                  </RangeCalendarCell>\r\n                </RangeCalendarGridRow>\r\n              </RangeCalendarGridBody>\r\n            </RangeCalendarGrid>\r\n          </div>\r\n        </div>\r\n      </RangeCalendarRoot>\r\n    </PopoverContent>\r\n  </Popover>\r\n</template>\r\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}
