{
  "name": "form",
  "type": "registry:ui",
  "dependencies": [
    "reka-ui",
    "vee-validate",
    "@vee-validate/zod",
    "zod"
  ],
  "registryDependencies": [
    "label"
  ],
  "files": [
    {
      "path": "ui/form/FormControl.vue",
      "content": "<script lang=\"ts\" setup>\r\nimport { Slot } from \"reka-ui\"\r\nimport { useFormField } from \"./useFormField\"\r\n\r\nconst { error, formItemId, formDescriptionId, formMessageId } = useFormField()\r\n</script>\r\n\r\n<template>\r\n  <Slot\r\n    :id=\"formItemId\"\r\n    :aria-describedby=\"!error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`\"\r\n    :aria-invalid=\"!!error\"\r\n  >\r\n    <slot />\r\n  </Slot>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/form/FormDescription.vue",
      "content": "<script lang=\"ts\" setup>\r\nimport type { HTMLAttributes } from \"vue\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { useFormField } from \"./useFormField\"\r\n\r\nconst props = defineProps<{\r\n  class?: HTMLAttributes[\"class\"]\r\n}>()\r\n\r\nconst { formDescriptionId } = useFormField()\r\n</script>\r\n\r\n<template>\r\n  <p\r\n    :id=\"formDescriptionId\"\r\n    :class=\"cn('text-sm text-muted-foreground', props.class)\"\r\n  >\r\n    <slot />\r\n  </p>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/form/FormItem.vue",
      "content": "<script lang=\"ts\" setup>\r\nimport type { HTMLAttributes } from \"vue\"\r\nimport { useId } from \"reka-ui\"\r\nimport { provide } from \"vue\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { FORM_ITEM_INJECTION_KEY } from \"./injectionKeys\"\r\n\r\nconst props = defineProps<{\r\n  class?: HTMLAttributes[\"class\"]\r\n}>()\r\n\r\nconst id = useId()\r\nprovide(FORM_ITEM_INJECTION_KEY, id)\r\n</script>\r\n\r\n<template>\r\n  <div :class=\"cn('space-y-2', props.class)\">\r\n    <slot />\r\n  </div>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/form/FormLabel.vue",
      "content": "<script lang=\"ts\" setup>\r\nimport type { LabelProps } from \"reka-ui\"\r\nimport type { HTMLAttributes } from \"vue\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Label } from \"@/registry/new-york/ui/label\"\r\nimport { useFormField } from \"./useFormField\"\r\n\r\nconst props = defineProps<LabelProps & { class?: HTMLAttributes[\"class\"] }>()\r\n\r\nconst { error, formItemId } = useFormField()\r\n</script>\r\n\r\n<template>\r\n  <Label\r\n    :class=\"cn(\r\n      error && 'text-destructive',\r\n      props.class,\r\n    )\"\r\n    :for=\"formItemId\"\r\n  >\r\n    <slot />\r\n  </Label>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/form/FormMessage.vue",
      "content": "<script lang=\"ts\" setup>\r\nimport { ErrorMessage } from \"vee-validate\"\r\nimport { toValue } from \"vue\"\r\nimport { useFormField } from \"./useFormField\"\r\n\r\nconst { name, formMessageId } = useFormField()\r\n</script>\r\n\r\n<template>\r\n  <ErrorMessage\r\n    :id=\"formMessageId\"\r\n    as=\"p\"\r\n    :name=\"toValue(name)\"\r\n    class=\"text-[0.8rem] font-medium text-destructive\"\r\n  />\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/form/index.ts",
      "content": "export { default as FormControl } from \"./FormControl.vue\"\r\nexport { default as FormDescription } from \"./FormDescription.vue\"\r\nexport { default as FormItem } from \"./FormItem.vue\"\r\nexport { default as FormLabel } from \"./FormLabel.vue\"\r\nexport { default as FormMessage } from \"./FormMessage.vue\"\r\nexport { FORM_ITEM_INJECTION_KEY } from \"./injectionKeys\"\r\nexport { Form, Field as FormField, FieldArray as FormFieldArray } from \"vee-validate\"\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/form/injectionKeys.ts",
      "content": "import type { InjectionKey } from \"vue\"\r\n\r\nexport const FORM_ITEM_INJECTION_KEY\r\n  = Symbol() as InjectionKey<string>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/form/useFormField.ts",
      "content": "import { FieldContextKey, useFieldError, useIsFieldDirty, useIsFieldTouched, useIsFieldValid } from \"vee-validate\"\r\nimport { inject } from \"vue\"\r\nimport { FORM_ITEM_INJECTION_KEY } from \"./injectionKeys\"\r\n\r\nexport function useFormField() {\r\n  const fieldContext = inject(FieldContextKey)\r\n  const fieldItemContext = inject(FORM_ITEM_INJECTION_KEY)\r\n\r\n  if (!fieldContext)\r\n    throw new Error(\"useFormField should be used within <FormField>\")\r\n\r\n  const { name } = fieldContext\r\n  const id = fieldItemContext\r\n\r\n  const fieldState = {\r\n    valid: useIsFieldValid(name),\r\n    isDirty: useIsFieldDirty(name),\r\n    isTouched: useIsFieldTouched(name),\r\n    error: useFieldError(name),\r\n  }\r\n\r\n  return {\r\n    id,\r\n    name,\r\n    formItemId: `${id}-form-item`,\r\n    formDescriptionId: `${id}-form-item-description`,\r\n    formMessageId: `${id}-form-item-message`,\r\n    ...fieldState,\r\n  }\r\n}\r\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
