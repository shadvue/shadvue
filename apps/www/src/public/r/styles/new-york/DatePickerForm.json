{
  "name": "DatePickerForm",
  "type": "registry:example",
  "dependencies": [
    "vee-validate",
    "@vee-validate/zod",
    "zod"
  ],
  "registryDependencies": [
    "button",
    "calendar",
    "form",
    "popover",
    "toast"
  ],
  "files": [
    {
      "path": "examples/DatePickerForm.vue",
      "content": "<script setup lang=\"ts\">\r\nimport { CalendarDate, DateFormatter, getLocalTimeZone, parseDate, today } from \"@internationalized/date\"\r\nimport { toTypedSchema } from \"@vee-validate/zod\"\r\nimport { CalendarIcon } from \"lucide-vue-next\"\r\nimport { toDate } from \"reka-ui/date\"\r\nimport { useForm } from \"vee-validate\"\r\nimport { computed, h, ref } from \"vue\"\r\nimport { z } from \"zod\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Button } from \"@/registry/new-york/ui/button\"\r\nimport { Calendar } from \"@/registry/new-york/ui/calendar\"\r\nimport {\r\n  FormControl,\r\n  FormDescription,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/registry/new-york/ui/form\"\r\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/registry/new-york/ui/popover\"\r\nimport { toast } from \"@/registry/new-york/ui/toast\"\r\n\r\nconst df = new DateFormatter(\"en-US\", {\r\n  dateStyle: \"long\",\r\n})\r\n\r\nconst formSchema = toTypedSchema(z.object({\r\n  dob: z\r\n    .string()\r\n    .refine(v => v, { message: \"A date of birth is required.\" }),\r\n}))\r\n\r\nconst placeholder = ref()\r\n\r\nconst { handleSubmit, setFieldValue, values } = useForm({\r\n  validationSchema: formSchema,\r\n  initialValues: {\r\n\r\n  },\r\n})\r\n\r\nconst value = computed({\r\n  get: () => values.dob ? parseDate(values.dob) : undefined,\r\n  set: val => val,\r\n})\r\n\r\nconst onSubmit = handleSubmit((values) => {\r\n  toast({\r\n    title: \"You submitted the following values:\",\r\n    description: h(\"pre\", { class: \"mt-2 w-[340px] rounded-md bg-slate-950 p-4\" }, h(\"code\", { class: \"text-white\" }, JSON.stringify(values, null, 2))),\r\n  })\r\n})\r\n</script>\r\n\r\n<template>\r\n  <form class=\"space-y-8\" @submit=\"onSubmit\">\r\n    <FormField name=\"dob\">\r\n      <FormItem class=\"flex flex-col\">\r\n        <FormLabel>Date of birth</FormLabel>\r\n        <Popover>\r\n          <PopoverTrigger as-child>\r\n            <FormControl>\r\n              <Button\r\n                variant=\"outline\" :class=\"cn(\r\n                  'w-[240px] ps-3 text-start font-normal',\r\n                  !value && 'text-muted-foreground',\r\n                )\"\r\n              >\r\n                <span>{{ value ? df.format(toDate(value)) : \"Pick a date\" }}</span>\r\n                <CalendarIcon class=\"ms-auto h-4 w-4 opacity-50\" />\r\n              </Button>\r\n              <input hidden>\r\n            </FormControl>\r\n          </PopoverTrigger>\r\n          <PopoverContent class=\"w-auto p-0\">\r\n            <Calendar\r\n              v-model:placeholder=\"placeholder\"\r\n              :model-value=\"value\"\r\n              calendar-label=\"Date of birth\"\r\n              initial-focus\r\n              :min-value=\"new CalendarDate(1900, 1, 1)\"\r\n              :max-value=\"today(getLocalTimeZone())\"\r\n              @update:model-value=\"(v) => {\r\n                if (v) {\r\n                  setFieldValue('dob', v.toString())\r\n                }\r\n                else {\r\n                  setFieldValue('dob', undefined)\r\n                }\r\n              }\"\r\n            />\r\n          </PopoverContent>\r\n        </Popover>\r\n        <FormDescription>\r\n          Your date of birth is used to calculate your age.\r\n        </FormDescription>\r\n        <FormMessage />\r\n      </FormItem>\r\n    </FormField>\r\n    <Button type=\"submit\">\r\n      Submit\r\n    </Button>\r\n  </Form>\r\n</template>\r\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}
