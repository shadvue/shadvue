{
  "name": "CalendarWithSelect",
  "type": "registry:example",
  "dependencies": [
    "reka-ui",
    "@vueuse/core"
  ],
  "registryDependencies": [
    "calendar",
    "select"
  ],
  "files": [
    {
      "path": "examples/CalendarWithSelect.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { DateValue } from \"@internationalized/date\"\nimport type { CalendarRootEmits, CalendarRootProps } from \"reka-ui\"\r\nimport type { HTMLAttributes, Ref } from \"vue\"\r\nimport { getLocalTimeZone, today } from \"@internationalized/date\"\nimport { useVModel } from \"@vueuse/core\"\r\nimport { CalendarRoot, useDateFormatter, useForwardPropsEmits } from \"reka-ui\"\r\nimport { createDecade, createYear, toDate } from \"reka-ui/date\"\nimport { computed } from \"vue\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { CalendarCell, CalendarCellTrigger, CalendarGrid, CalendarGridBody, CalendarGridHead, CalendarGridRow, CalendarHeadCell, CalendarHeader, CalendarHeading } from \"@/registry/new-york/ui/calendar\"\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/registry/new-york/ui/select\"\r\n\r\nconst props = withDefaults(defineProps<CalendarRootProps & { class?: HTMLAttributes[\"class\"] }>(), {\r\n  modelValue: undefined,\r\n  placeholder() {\r\n    return today(getLocalTimeZone())\r\n  },\r\n  weekdayFormat: \"short\",\r\n})\r\nconst emits = defineEmits<CalendarRootEmits>()\r\n\r\nconst delegatedProps = computed(() => {\r\n  const { class: _, placeholder: __, ...delegated } = props\r\n\r\n  return delegated\r\n})\r\n\r\nconst placeholder = useVModel(props, \"modelValue\", emits, {\r\n  passive: true,\r\n  defaultValue: today(getLocalTimeZone()),\r\n}) as Ref<DateValue>\r\n\r\nconst forwarded = useForwardPropsEmits(delegatedProps, emits)\r\n\r\nconst formatter = useDateFormatter(\"en\")\r\n</script>\r\n\r\n<template>\r\n  <CalendarRoot\r\n    v-slot=\"{ date, grid, weekDays }\"\r\n    v-model:placeholder=\"placeholder\"\r\n    v-bind=\"forwarded\"\r\n    :class=\"cn('rounded-md border p-3', props.class)\"\r\n  >\r\n    <CalendarHeader>\r\n      <CalendarHeading class=\"flex w-full items-center justify-between gap-2\">\r\n        <Select\r\n          :default-value=\"placeholder.month.toString()\"\r\n          @update:model-value=\"(v) => {\r\n            if (!v || !placeholder) return;\r\n            if (Number(v) === placeholder?.month) return;\r\n            placeholder = placeholder.set({\r\n              month: Number(v),\r\n            })\r\n          }\"\r\n        >\r\n          <SelectTrigger aria-label=\"Select month\" class=\"w-[60%]\">\r\n            <SelectValue placeholder=\"Select month\" />\r\n          </SelectTrigger>\r\n          <SelectContent class=\"max-h-[200px]\">\r\n            <SelectItem\r\n              v-for=\"month in createYear({ dateObj: date })\"\r\n              :key=\"month.toString()\" :value=\"month.month.toString()\"\r\n            >\r\n              {{ formatter.custom(toDate(month), { month: 'long' }) }}\r\n            </SelectItem>\r\n          </SelectContent>\r\n        </Select>\r\n\r\n        <Select\r\n          :default-value=\"placeholder.year.toString()\"\r\n          @update:model-value=\"(v) => {\r\n            if (!v || !placeholder) return;\r\n            if (Number(v) === placeholder?.year) return;\r\n            placeholder = placeholder.set({\r\n              year: Number(v),\r\n            })\r\n          }\"\r\n        >\r\n          <SelectTrigger aria-label=\"Select year\" class=\"w-[40%]\">\r\n            <SelectValue placeholder=\"Select year\" />\r\n          </SelectTrigger>\r\n          <SelectContent class=\"max-h-[200px]\">\r\n            <SelectItem\r\n              v-for=\"yearValue in createDecade({ dateObj: date, startIndex: -10, endIndex: 10 })\"\r\n              :key=\"yearValue.toString()\" :value=\"yearValue.year.toString()\"\r\n            >\r\n              {{ yearValue.year }}\r\n            </SelectItem>\r\n          </SelectContent>\r\n        </Select>\r\n      </CalendarHeading>\r\n    </CalendarHeader>\r\n\r\n    <div class=\"flex flex-col space-y-4 pt-4 sm:flex-row sm:gap-x-4 sm:gap-y-0\">\r\n      <CalendarGrid v-for=\"month in grid\" :key=\"month.value.toString()\">\r\n        <CalendarGridHead>\r\n          <CalendarGridRow>\r\n            <CalendarHeadCell\r\n              v-for=\"day in weekDays\" :key=\"day\"\r\n            >\r\n              {{ day }}\r\n            </CalendarHeadCell>\r\n          </CalendarGridRow>\r\n        </CalendarGridHead>\r\n        <CalendarGridBody class=\"grid\">\r\n          <CalendarGridRow v-for=\"(weekDates, index) in month.rows\" :key=\"`weekDate-${index}`\" class=\"mt-2 w-full\">\r\n            <CalendarCell\r\n              v-for=\"weekDate in weekDates\"\r\n              :key=\"weekDate.toString()\"\r\n              :date=\"weekDate\"\r\n            >\r\n              <CalendarCellTrigger\r\n                :day=\"weekDate\"\r\n                :month=\"month.value\"\r\n              />\r\n            </CalendarCell>\r\n          </CalendarGridRow>\r\n        </CalendarGridBody>\r\n      </CalendarGrid>\r\n    </div>\r\n  </CalendarRoot>\r\n</template>\r\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}
