{
  "name": "command",
  "type": "registry:ui",
  "dependencies": [
    "reka-ui",
    "@vueuse/core"
  ],
  "registryDependencies": [
    "dialog"
  ],
  "files": [
    {
      "path": "ui/command/Command.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { ListboxRootEmits, ListboxRootProps } from \"reka-ui\"\r\nimport type { HTMLAttributes } from \"vue\"\r\nimport { reactiveOmit } from \"@vueuse/core\"\r\nimport { ListboxRoot, useFilter, useForwardPropsEmits } from \"reka-ui\"\nimport { reactive, ref, watch } from \"vue\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { provideCommandContext } from \".\"\r\n\r\nconst props = withDefaults(defineProps<ListboxRootProps & { class?: HTMLAttributes[\"class\"] }>(), {\r\n  modelValue: \"\",\r\n})\r\n\r\nconst emits = defineEmits<ListboxRootEmits>()\r\n\r\nconst delegatedProps = reactiveOmit(props, \"class\")\r\n\r\nconst forwarded = useForwardPropsEmits(delegatedProps, emits)\r\n\r\nconst allItems = ref<Map<string, string>>(new Map())\r\nconst allGroups = ref<Map<string, Set<string>>>(new Map())\r\n\r\nconst { contains } = useFilter({ sensitivity: \"base\" })\r\nconst filterState = reactive({\r\n  search: \"\",\r\n  filtered: {\r\n    /** The count of all visible items. */\r\n    count: 0,\r\n    /** Map from visible item id to its search score. */\r\n    items: new Map() as Map<string, number>,\r\n    /** Set of groups with at least one visible item. */\r\n    groups: new Set() as Set<string>,\r\n  },\r\n})\r\n\r\nfunction filterItems() {\r\n  if (!filterState.search) {\r\n    filterState.filtered.count = allItems.value.size\r\n    // Do nothing, each item will know to show itself because search is empty\r\n    return\r\n  }\r\n\r\n  // Reset the groups\r\n  filterState.filtered.groups = new Set()\r\n  let itemCount = 0\r\n\r\n  // Check which items should be included\r\n  for (const [id, value] of allItems.value) {\r\n    const score = contains(value, filterState.search)\r\n    filterState.filtered.items.set(id, score ? 1 : 0)\r\n    if (score)\r\n      itemCount++\r\n  }\r\n\r\n  // Check which groups have at least 1 item shown\r\n  for (const [groupId, group] of allGroups.value) {\r\n    for (const itemId of group) {\r\n      if (filterState.filtered.items.get(itemId)! > 0) {\r\n        filterState.filtered.groups.add(groupId)\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  filterState.filtered.count = itemCount\r\n}\r\n\r\nfunction handleSelect() {\r\n  filterState.search = \"\"\r\n}\r\n\r\nwatch(() => filterState.search, () => {\r\n  filterItems()\r\n})\r\n\r\nprovideCommandContext({\r\n  allItems,\r\n  allGroups,\r\n  filterState,\r\n})\r\n</script>\r\n\r\n<template>\r\n  <ListboxRoot\r\n    v-bind=\"forwarded\"\r\n    :class=\"cn('flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground', props.class)\"\r\n  >\r\n    <slot />\r\n  </ListboxRoot>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/command/CommandDialog.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { DialogRootEmits, DialogRootProps } from \"reka-ui\"\r\nimport { useForwardPropsEmits } from \"reka-ui\"\r\nimport { Dialog, DialogContent } from \"@/registry/new-york/ui/dialog\"\r\nimport Command from \"./Command.vue\"\r\n\r\nconst props = defineProps<DialogRootProps>()\r\nconst emits = defineEmits<DialogRootEmits>()\r\n\r\nconst forwarded = useForwardPropsEmits(props, emits)\r\n</script>\r\n\r\n<template>\r\n  <Dialog v-bind=\"forwarded\">\r\n    <DialogContent class=\"overflow-hidden p-0 shadow-lg\">\r\n      <Command class=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\r\n        <slot />\r\n      </Command>\r\n    </DialogContent>\r\n  </Dialog>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/command/CommandEmpty.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { PrimitiveProps } from \"reka-ui\"\r\nimport type { HTMLAttributes } from \"vue\"\r\nimport { reactiveOmit } from \"@vueuse/core\"\r\nimport { Primitive } from \"reka-ui\"\nimport { computed } from \"vue\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { useCommand } from \".\"\r\n\r\nconst props = defineProps<PrimitiveProps & { class?: HTMLAttributes[\"class\"] }>()\r\n\r\nconst delegatedProps = reactiveOmit(props, \"class\")\r\n\r\nconst { filterState } = useCommand()\r\nconst isRender = computed(() => !!filterState.search && filterState.filtered.count === 0,\r\n)\r\n</script>\r\n\r\n<template>\r\n  <Primitive v-if=\"isRender\" v-bind=\"delegatedProps\" :class=\"cn('py-6 text-center text-sm', props.class)\">\r\n    <slot />\r\n  </Primitive>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/command/CommandGroup.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { ListboxGroupProps } from \"reka-ui\"\r\nimport type { HTMLAttributes } from \"vue\"\r\nimport { reactiveOmit } from \"@vueuse/core\"\r\nimport { ListboxGroup, ListboxGroupLabel, useId } from \"reka-ui\"\nimport { computed, onMounted, onUnmounted } from \"vue\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { provideCommandGroupContext, useCommand } from \".\"\r\n\r\nconst props = defineProps<ListboxGroupProps & {\r\n  class?: HTMLAttributes[\"class\"]\r\n  heading?: string\r\n}>()\r\n\r\nconst delegatedProps = reactiveOmit(props, \"class\")\r\n\r\nconst { allGroups, filterState } = useCommand()\r\nconst id = useId()\r\n\r\nconst isRender = computed(() => !filterState.search ? true : filterState.filtered.groups.has(id))\r\n\r\nprovideCommandGroupContext({ id })\r\nonMounted(() => {\r\n  if (!allGroups.value.has(id))\r\n    allGroups.value.set(id, new Set())\r\n})\r\nonUnmounted(() => {\r\n  allGroups.value.delete(id)\r\n})\r\n</script>\r\n\r\n<template>\r\n  <ListboxGroup\r\n    v-bind=\"delegatedProps\"\r\n    :id=\"id\"\r\n    :class=\"cn('overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground', props.class)\"\r\n    :hidden=\"isRender ? undefined : true\"\r\n  >\r\n    <ListboxGroupLabel v-if=\"heading\" class=\"px-2 py-1.5 text-xs font-medium text-muted-foreground\">\r\n      {{ heading }}\r\n    </ListboxGroupLabel>\r\n    <slot />\r\n  </ListboxGroup>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/command/CommandInput.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { ListboxFilterProps } from \"reka-ui\"\r\nimport type { HTMLAttributes } from \"vue\"\r\nimport { reactiveOmit } from \"@vueuse/core\"\r\nimport { Search } from \"lucide-vue-next\"\nimport { ListboxFilter, useForwardProps } from \"reka-ui\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { useCommand } from \".\"\r\n\r\ndefineOptions({\r\n  inheritAttrs: false,\r\n})\r\n\r\nconst props = defineProps<ListboxFilterProps & {\r\n  class?: HTMLAttributes[\"class\"]\r\n}>()\r\n\r\nconst delegatedProps = reactiveOmit(props, \"class\")\r\n\r\nconst forwardedProps = useForwardProps(delegatedProps)\r\n\r\nconst { filterState } = useCommand()\r\n</script>\r\n\r\n<template>\r\n  <div class=\"flex items-center border-b px-3\" cmdk-input-wrapper>\r\n    <Search class=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\r\n    <ListboxFilter\r\n      v-bind=\"{ ...forwardedProps, ...$attrs }\"\r\n      v-model=\"filterState.search\"\r\n      auto-focus\r\n      :class=\"cn('flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50', props.class)\"\r\n    />\r\n  </div>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/command/CommandItem.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { ListboxItemEmits, ListboxItemProps } from \"reka-ui\"\r\nimport type { HTMLAttributes } from \"vue\"\r\nimport { reactiveOmit, useCurrentElement } from \"@vueuse/core\"\r\nimport { ListboxItem, useForwardPropsEmits, useId } from \"reka-ui\"\nimport { computed, onMounted, onUnmounted, ref } from \"vue\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { useCommand, useCommandGroup } from \".\"\r\n\r\nconst props = defineProps<ListboxItemProps & { class?: HTMLAttributes[\"class\"] }>()\r\nconst emits = defineEmits<ListboxItemEmits>()\r\n\r\nconst delegatedProps = reactiveOmit(props, \"class\")\r\n\r\nconst forwarded = useForwardPropsEmits(delegatedProps, emits)\r\n\r\nconst id = useId()\r\nconst { filterState, allItems, allGroups } = useCommand()\r\nconst groupContext = useCommandGroup()\r\n\r\nconst isRender = computed(() => {\r\n  if (!filterState.search) {\r\n    return true\r\n  }\r\n  else {\r\n    const filteredCurrentItem = filterState.filtered.items.get(id)\r\n    // If the filtered items is undefined means not in the all times map yet\r\n    // Do the first render to add into the map\r\n    if (filteredCurrentItem === undefined) {\r\n      return true\r\n    }\r\n\r\n    // Check with filter\r\n    return filteredCurrentItem > 0\r\n  }\r\n})\r\n\r\nconst itemRef = ref()\r\nconst currentElement = useCurrentElement(itemRef)\r\nonMounted(() => {\r\n  if (!(currentElement.value instanceof HTMLElement))\r\n    return\r\n\r\n  // textValue to perform filter\r\n  allItems.value.set(id, currentElement.value.textContent ?? props?.value!.toString())\r\n\r\n  const groupId = groupContext?.id\r\n  if (groupId) {\r\n    if (!allGroups.value.has(groupId)) {\r\n      allGroups.value.set(groupId, new Set([id]))\r\n    }\r\n    else {\r\n      allGroups.value.get(groupId)?.add(id)\r\n    }\r\n  }\r\n})\r\nonUnmounted(() => {\r\n  allItems.value.delete(id)\r\n})\r\n</script>\r\n\r\n<template>\r\n  <ListboxItem\r\n    v-if=\"isRender\"\r\n    v-bind=\"forwarded\"\r\n    :id=\"id\"\r\n    ref=\"itemRef\"\r\n    :class=\"cn('relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[highlighted]:bg-accent data-[highlighted]:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:size-4 [&_svg]:shrink-0', props.class)\"\r\n    @select=\"() => {\r\n      filterState.search = ''\r\n    }\"\r\n  >\r\n    <slot />\r\n  </ListboxItem>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/command/CommandList.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { ListboxContentProps } from \"reka-ui\"\r\nimport type { HTMLAttributes } from \"vue\"\r\nimport { reactiveOmit } from \"@vueuse/core\"\r\nimport { ListboxContent, useForwardProps } from \"reka-ui\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst props = defineProps<ListboxContentProps & { class?: HTMLAttributes[\"class\"] }>()\r\n\r\nconst delegatedProps = reactiveOmit(props, \"class\")\r\n\r\nconst forwarded = useForwardProps(delegatedProps)\r\n</script>\r\n\r\n<template>\r\n  <ListboxContent v-bind=\"forwarded\" :class=\"cn('max-h-[300px] overflow-y-auto overflow-x-hidden', props.class)\">\r\n    <div role=\"presentation\">\r\n      <slot />\r\n    </div>\r\n  </ListboxContent>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/command/CommandSeparator.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { SeparatorProps } from \"reka-ui\"\r\nimport type { HTMLAttributes } from \"vue\"\r\nimport { reactiveOmit } from \"@vueuse/core\"\r\nimport { Separator } from \"reka-ui\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst props = defineProps<SeparatorProps & { class?: HTMLAttributes[\"class\"] }>()\r\n\r\nconst delegatedProps = reactiveOmit(props, \"class\")\r\n</script>\r\n\r\n<template>\r\n  <Separator\r\n    v-bind=\"delegatedProps\"\r\n    :class=\"cn('-mx-1 h-px bg-border', props.class)\"\r\n  >\r\n    <slot />\r\n  </Separator>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/command/CommandShortcut.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { HTMLAttributes } from \"vue\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst props = defineProps<{\r\n  class?: HTMLAttributes[\"class\"]\r\n}>()\r\n</script>\r\n\r\n<template>\r\n  <span :class=\"cn('ml-auto text-xs tracking-widest text-muted-foreground', props.class)\">\r\n    <slot />\r\n  </span>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/command/index.ts",
      "content": "import type { Ref } from \"vue\"\r\nimport { createContext } from \"reka-ui\"\r\n\r\nexport { default as Command } from \"./Command.vue\"\r\nexport { default as CommandDialog } from \"./CommandDialog.vue\"\r\nexport { default as CommandEmpty } from \"./CommandEmpty.vue\"\r\nexport { default as CommandGroup } from \"./CommandGroup.vue\"\r\nexport { default as CommandInput } from \"./CommandInput.vue\"\r\nexport { default as CommandItem } from \"./CommandItem.vue\"\r\nexport { default as CommandList } from \"./CommandList.vue\"\r\nexport { default as CommandSeparator } from \"./CommandSeparator.vue\"\r\nexport { default as CommandShortcut } from \"./CommandShortcut.vue\"\r\n\r\nexport const [useCommand, provideCommandContext] = createContext<{\r\n  allItems: Ref<Map<string, string>>\r\n  allGroups: Ref<Map<string, Set<string>>>\r\n  filterState: {\r\n    search: string\r\n    filtered: { count: number, items: Map<string, number>, groups: Set<string> }\r\n  }\r\n}>(\"Command\")\r\n\r\nexport const [useCommandGroup, provideCommandGroupContext] = createContext<{\r\n  id?: string\r\n}>(\"CommandGroup\")\r\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
