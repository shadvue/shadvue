{
  "name": "NumberFieldForm",
  "type": "registry:example",
  "dependencies": [
    "vee-validate",
    "@vee-validate/zod",
    "zod"
  ],
  "registryDependencies": [
    "button",
    "form",
    "number-field",
    "toast"
  ],
  "files": [
    {
      "path": "examples/NumberFieldForm.vue",
      "content": "<script setup lang=\"ts\">\r\nimport { toTypedSchema } from \"@vee-validate/zod\"\r\nimport { useForm } from \"vee-validate\"\r\nimport { h } from \"vue\"\r\nimport * as z from \"zod\"\r\n\r\nimport { Button } from \"@/registry/default/ui/button\"\r\nimport {\r\n  FormControl,\r\n  FormDescription,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/registry/default/ui/form\"\r\nimport {\r\n  NumberField,\r\n  NumberFieldContent,\r\n  NumberFieldDecrement,\r\n  NumberFieldIncrement,\r\n  NumberFieldInput,\r\n} from \"@/registry/default/ui/number-field\"\r\nimport { toast } from \"@/registry/default/ui/toast\"\r\n\r\nconst formSchema = toTypedSchema(z.object({\r\n  payment: z.number().min(10, \"Min 10 euros to send payment\").max(5000, \"Max 5000 euros to send payment\"),\r\n}))\r\n\r\nconst { handleSubmit, setFieldValue } = useForm({\r\n  validationSchema: formSchema,\r\n  initialValues: {\r\n    payment: 10,\r\n  },\r\n})\r\n\r\nconst onSubmit = handleSubmit((values) => {\r\n  toast({\r\n    title: \"You submitted the following values:\",\r\n    description: h(\"pre\", { class: \"mt-2 w-[340px] rounded-md bg-slate-950 p-4\" }, h(\"code\", { class: \"text-white\" }, JSON.stringify(values, null, 2))),\r\n  })\r\n})\r\n</script>\r\n\r\n<template>\r\n  <form class=\"w-2/3 space-y-6\" @submit=\"onSubmit\">\r\n    <FormField v-slot=\"{ value }\" name=\"payment\">\r\n      <FormItem>\r\n        <FormLabel>Payment</FormLabel>\r\n        <NumberField\r\n          class=\"gap-2\"\r\n          :min=\"0\"\r\n          :format-options=\"{\r\n            style: 'currency',\r\n            currency: 'EUR',\r\n            currencyDisplay: 'code',\r\n            currencySign: 'accounting',\r\n          }\"\r\n          :model-value=\"value\"\r\n          @update:model-value=\"(v) => {\r\n            if (v) {\r\n              setFieldValue('payment', v)\r\n            }\r\n            else {\r\n              setFieldValue('payment', undefined)\r\n            }\r\n          }\"\r\n        >\r\n          <NumberFieldContent>\r\n            <NumberFieldDecrement />\r\n            <FormControl>\r\n              <NumberFieldInput />\r\n            </FormControl>\r\n            <NumberFieldIncrement />\r\n          </NumberFieldContent>\r\n        </NumberField>\r\n        <FormDescription>\r\n          Enter value between 10 and 5000.\r\n        </FormDescription>\r\n        <FormMessage />\r\n      </FormItem>\r\n    </FormField>\r\n    <Button type=\"submit\">\r\n      Submit\r\n    </Button>\r\n  </form>\r\n</template>\r\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}
