{
  "name": "chart",
  "type": "registry:ui",
  "dependencies": [
    "@unovis/vue",
    "@unovis/ts"
  ],
  "registryDependencies": [
    "button",
    "card"
  ],
  "files": [
    {
      "path": "ui/chart/ChartCrosshair.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { BulletLegendItemInterface } from \"@unovis/ts\"\r\nimport type { Component } from \"vue\"\r\nimport { omit } from \"@unovis/ts\"\r\nimport { VisCrosshair, VisTooltip } from \"@unovis/vue\"\r\nimport { createApp } from \"vue\"\r\nimport { ChartTooltip } from \".\"\r\n\r\nconst props = withDefaults(defineProps<{\r\n  colors: string[]\r\n  index: string\r\n  items: BulletLegendItemInterface[]\r\n  customTooltip?: Component\r\n}>(), {\r\n  colors: () => [],\r\n})\r\n\r\n// Use weakmap to store reference to each datapoint for Tooltip\r\nconst wm = new WeakMap()\r\nfunction template(d: any) {\r\n  if (wm.has(d)) {\r\n    return wm.get(d)\r\n  }\r\n  else {\r\n    const componentDiv = document.createElement(\"div\")\r\n    const omittedData = Object.entries(omit(d, [props.index])).map(([key, value]) => {\r\n      const legendReference = props.items.find(i => i.name === key)\r\n      return { ...legendReference, value }\r\n    })\r\n    const TooltipComponent = props.customTooltip ?? ChartTooltip\r\n    createApp(TooltipComponent, { title: d[props.index].toString(), data: omittedData }).mount(componentDiv)\r\n    wm.set(d, componentDiv.innerHTML)\r\n    return componentDiv.innerHTML\r\n  }\r\n}\r\n\r\nfunction color(d: unknown, i: number) {\r\n  return props.colors[i] ?? \"transparent\"\r\n}\r\n</script>\r\n\r\n<template>\r\n  <VisTooltip :horizontal-shift=\"20\" :vertical-shift=\"20\" />\r\n  <VisCrosshair :template=\"template\" :color=\"color\" />\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/chart/ChartLegend.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { BulletLegendItemInterface } from \"@unovis/ts\"\r\nimport { BulletLegend } from \"@unovis/ts\"\r\nimport { VisBulletLegend } from \"@unovis/vue\"\r\nimport { nextTick, onMounted, ref } from \"vue\"\r\nimport { buttonVariants } from \"@/registry/default/ui/button\"\r\n\r\nconst props = withDefaults(defineProps<{ items: BulletLegendItemInterface[] }>(), {\r\n  items: () => [],\r\n})\r\n\r\nconst emits = defineEmits<{\r\n  \"legendItemClick\": [d: BulletLegendItemInterface, i: number]\r\n  \"update:items\": [payload: BulletLegendItemInterface[]]\r\n}>()\r\n\r\nconst elRef = ref<HTMLElement>()\r\n\r\nfunction keepStyling() {\r\n  const selector = `.${BulletLegend.selectors.item}`\r\n  nextTick(() => {\r\n    const elements = elRef.value?.querySelectorAll(selector)\r\n    const classes = buttonVariants({ variant: \"ghost\", size: \"sm\" }).split(\" \")\r\n    elements?.forEach(el => el.classList.add(...classes, \"!inline-flex\", \"!mr-2\"))\r\n  })\r\n}\r\n\r\nonMounted(() => {\r\n  keepStyling()\r\n})\r\n\r\nfunction onLegendItemClick(d: BulletLegendItemInterface, i: number) {\r\n  emits(\"legendItemClick\", d, i)\r\n  const isBulletActive = !props.items[i].inactive\r\n  const isFilterApplied = props.items.some(i => i.inactive)\r\n  if (isFilterApplied && isBulletActive) {\r\n    // reset filter\r\n    emits(\"update:items\", props.items.map(item => ({ ...item, inactive: false })))\r\n  }\r\n  else {\r\n    // apply selection, set other item as inactive\r\n    emits(\"update:items\", props.items.map(item => item.name === d.name ? ({ ...d, inactive: false }) : { ...item, inactive: true }))\r\n  }\r\n  keepStyling()\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    ref=\"elRef\" class=\"w-max\" :style=\"{\r\n      '--vis-legend-bullet-size': '16px',\r\n    }\"\r\n  >\r\n    <VisBulletLegend\r\n      :items=\"items\"\r\n      :on-legend-item-click=\"onLegendItemClick\"\r\n    />\r\n  </div>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/chart/ChartSingleTooltip.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { BulletLegendItemInterface } from \"@unovis/ts\"\r\nimport type { Component } from \"vue\"\r\nimport { omit } from \"@unovis/ts\"\r\nimport { VisTooltip } from \"@unovis/vue\"\r\nimport { createApp } from \"vue\"\r\nimport { ChartTooltip } from \".\"\r\n\r\nconst props = defineProps<{\r\n  selector: string\r\n  index: string\r\n  items?: BulletLegendItemInterface[]\r\n  valueFormatter?: (tick: number, i?: number, ticks?: number[]) => string\r\n  customTooltip?: Component\r\n}>()\r\n\r\n// Use weakmap to store reference to each datapoint for Tooltip\r\nconst wm = new WeakMap()\r\nfunction template(d: any, i: number, elements: (HTMLElement | SVGElement)[]) {\r\n  const valueFormatter = props.valueFormatter ?? ((tick: number) => `${tick}`)\r\n  if (props.index in d) {\r\n    if (wm.has(d)) {\r\n      return wm.get(d)\r\n    }\r\n    else {\r\n      const componentDiv = document.createElement(\"div\")\r\n      const omittedData = Object.entries(omit(d, [props.index])).map(([key, value]) => {\r\n        const legendReference = props.items?.find(i => i.name === key)\r\n        return { ...legendReference, value: valueFormatter(value) }\r\n      })\r\n      const TooltipComponent = props.customTooltip ?? ChartTooltip\r\n      createApp(TooltipComponent, { title: d[props.index], data: omittedData }).mount(componentDiv)\r\n      wm.set(d, componentDiv.innerHTML)\r\n      return componentDiv.innerHTML\r\n    }\r\n  }\r\n\r\n  else {\r\n    const data = d.data\r\n\r\n    if (wm.has(data)) {\r\n      return wm.get(data)\r\n    }\r\n    else {\r\n      const style = getComputedStyle(elements[i])\r\n      const omittedData = [{ name: data.name, value: valueFormatter(data[props.index]), color: style.fill }]\r\n      const componentDiv = document.createElement(\"div\")\r\n      const TooltipComponent = props.customTooltip ?? ChartTooltip\r\n      createApp(TooltipComponent, { title: d[props.index], data: omittedData }).mount(componentDiv)\r\n      wm.set(d, componentDiv.innerHTML)\r\n      return componentDiv.innerHTML\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <VisTooltip\r\n    :horizontal-shift=\"20\" :vertical-shift=\"20\" :triggers=\"{\r\n      [selector]: template,\r\n    }\"\r\n  />\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/chart/ChartTooltip.vue",
      "content": "<script setup lang=\"ts\">\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/registry/default/ui/card\"\r\n\r\ndefineProps<{\r\n  title?: string\r\n  data: {\r\n    name: string\r\n    color: string\r\n    value: any\r\n  }[]\r\n}>()\r\n</script>\r\n\r\n<template>\r\n  <Card class=\"text-sm\">\r\n    <CardHeader v-if=\"title\" class=\"p-3 border-b\">\r\n      <CardTitle>\r\n        {{ title }}\r\n      </CardTitle>\r\n    </CardHeader>\r\n    <CardContent class=\"p-3 min-w-[180px] flex flex-col gap-1\">\r\n      <div v-for=\"(item, key) in data\" :key=\"key\" class=\"flex justify-between\">\r\n        <div class=\"flex items-center\">\r\n          <span class=\"w-2.5 h-2.5 mr-2\">\r\n            <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 30 30\">\r\n              <path\r\n                d=\" M 15 15 m -14, 0 a 14,14 0 1,1 28,0 a 14,14 0 1,1 -28,0\"\r\n                :stroke=\"item.color\"\r\n                :fill=\"item.color\"\r\n                stroke-width=\"1\"\r\n              />\r\n            </svg>\r\n          </span>\r\n          <span>{{ item.name }}</span>\r\n        </div>\r\n        <span class=\"font-semibold ml-4\">{{ item.value }}</span>\r\n      </div>\r\n    </CardContent>\r\n  </Card>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/chart/index.ts",
      "content": "export { default as ChartCrosshair } from \"./ChartCrosshair.vue\"\r\nexport { default as ChartLegend } from \"./ChartLegend.vue\"\r\nexport { default as ChartSingleTooltip } from \"./ChartSingleTooltip.vue\"\r\nexport { default as ChartTooltip } from \"./ChartTooltip.vue\"\r\n\r\nexport function defaultColors(count: number = 3) {\r\n  const quotient = Math.floor(count / 2)\r\n  const remainder = count % 2\r\n\r\n  const primaryCount = quotient + remainder\r\n  const secondaryCount = quotient\r\n  return [\r\n    ...Array.from(new Array(primaryCount).keys()).map(i => `hsl(var(--vis-primary-color) / ${1 - (1 / primaryCount) * i})`),\r\n    ...Array.from(new Array(secondaryCount).keys()).map(i => `hsl(var(--vis-secondary-color) / ${1 - (1 / secondaryCount) * i})`),\r\n  ]\r\n}\r\n\r\nexport * from \"./interface\"\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/chart/interface.ts",
      "content": "import type { Spacing } from \"@unovis/ts\"\r\n\r\ntype KeyOf<T extends Record<string, any>> = Extract<keyof T, string>\r\n\r\nexport interface BaseChartProps<T extends Record<string, any>> {\r\n  /**\r\n   * The source data, in which each entry is a dictionary.\r\n   */\r\n  data: T[]\r\n  /**\r\n   * Select the categories from your data. Used to populate the legend and toolip.\r\n   */\r\n  categories: KeyOf<T>[]\r\n  /**\r\n   * Sets the key to map the data to the axis.\r\n   */\r\n  index: KeyOf<T>\r\n  /**\r\n   * Change the default colors.\r\n   */\r\n  colors?: string[]\r\n  /**\r\n   * Margin of each the container\r\n   */\r\n  margin?: Spacing\r\n  /**\r\n   * Change the opacity of the non-selected field\r\n   * @default 0.2\r\n   */\r\n  filterOpacity?: number\r\n  /**\r\n   * Function to format X label\r\n   */\r\n  xFormatter?: (tick: number | Date, i: number, ticks: number[] | Date[]) => string\r\n  /**\r\n   * Function to format Y label\r\n   */\r\n  yFormatter?: (tick: number | Date, i: number, ticks: number[] | Date[]) => string\r\n  /**\r\n   * Controls the visibility of the X axis.\r\n   * @default true\r\n   */\r\n  showXAxis?: boolean\r\n  /**\r\n   * Controls the visibility of the Y axis.\r\n   * @default true\r\n   */\r\n  showYAxis?: boolean\r\n  /**\r\n   * Controls the visibility of tooltip.\r\n   * @default true\r\n   */\r\n  showTooltip?: boolean\r\n  /**\r\n   * Controls the visibility of legend.\r\n   * @default true\r\n   */\r\n  showLegend?: boolean\r\n  /**\r\n   * Controls the visibility of gridline.\r\n   * @default true\r\n   */\r\n  showGridLine?: boolean\r\n}\r\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
