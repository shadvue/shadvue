{
  "name": "PinInputFormDemo",
  "type": "registry:example",
  "dependencies": [
    "vee-validate",
    "@vee-validate/zod",
    "zod"
  ],
  "registryDependencies": [
    "button",
    "form",
    "pin-input",
    "toast"
  ],
  "files": [
    {
      "path": "examples/PinInputFormDemo.vue",
      "content": "<script setup lang=\"ts\">\r\nimport { toTypedSchema } from \"@vee-validate/zod\"\r\nimport { useForm } from \"vee-validate\"\r\nimport { h } from \"vue\"\r\nimport * as z from \"zod\"\r\nimport { Button } from \"@/registry/default/ui/button\"\r\nimport {\r\n  FormControl,\r\n  FormDescription,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from \"@/registry/default/ui/form\"\r\nimport {\r\n  PinInput,\r\n  PinInputGroup,\r\n  PinInputSlot,\r\n} from \"@/registry/default/ui/pin-input\"\r\nimport { toast } from \"@/registry/default/ui/toast\"\r\n\r\nconst formSchema = toTypedSchema(z.object({\r\n  pin: z.array(z.coerce.string()).length(5, { message: \"Invalid input\" }),\r\n}))\r\n\r\nconst { handleSubmit, setFieldValue } = useForm({\r\n  validationSchema: formSchema,\r\n  initialValues: {\r\n    pin: [\"1\", \"2\", \"3\"],\r\n  },\r\n})\r\n\r\nconst onSubmit = handleSubmit(({ pin }) => {\r\n  toast({\r\n    title: \"You submitted the following values:\",\r\n    description: h(\"pre\", { class: \"mt-2 w-[340px] rounded-md bg-slate-950 p-4\" }, h(\"code\", { class: \"text-white\" }, JSON.stringify(pin.join(\"\"), null, 2))),\r\n  })\r\n})\r\n\r\nconst handleComplete = (e: string[]) => console.log(e.join(\"\"))\r\n</script>\r\n\r\n<template>\r\n  <form class=\"w-2/3 space-y-6 mx-auto\" @submit=\"onSubmit\">\r\n    <FormField v-slot=\"{ componentField, value }\" name=\"pin\">\r\n      <FormItem>\r\n        <FormLabel>OTP</FormLabel>\r\n        <FormControl>\r\n          <PinInput\r\n            id=\"pin-input\"\r\n            :model-value=\"value\"\r\n            placeholder=\"â—‹\"\r\n            class=\"flex gap-2 items-center mt-1\"\r\n            otp\r\n            type=\"number\"\r\n            :name=\"componentField.name\"\r\n            @complete=\"handleComplete\"\r\n            @update:model-value=\"(arrStr) => {\r\n              setFieldValue('pin', arrStr)\r\n            }\"\r\n          >\r\n            <PinInputGroup>\r\n              <PinInputSlot\r\n                v-for=\"(id, index) in 5\"\r\n                :key=\"id\"\r\n                :index=\"index\"\r\n              />\r\n            </PinInputGroup>\r\n          </PinInput>\r\n        </FormControl>\r\n        <FormDescription>\r\n          Allows users to input a sequence of one-character alphanumeric inputs.\r\n        </FormDescription>\r\n        <FormMessage />\r\n      </FormItem>\r\n    </FormField>\r\n\r\n    <Button>Submit</Button>\r\n  </form>\r\n</template>\r\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}
