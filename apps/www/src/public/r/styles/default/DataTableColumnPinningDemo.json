{
  "name": "DataTableColumnPinningDemo",
  "type": "registry:example",
  "dependencies": [
    "@tanstack/vue-table"
  ],
  "registryDependencies": [
    "button",
    "checkbox",
    "dropdown-menu",
    "input",
    "table"
  ],
  "files": [
    {
      "path": "examples/DataTableColumnPinningDemo.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type {\r\n  ColumnFiltersState,\r\n  ExpandedState,\r\n  SortingState,\r\n  VisibilityState,\r\n} from \"@tanstack/vue-table\"\r\nimport {\r\n  createColumnHelper,\r\n  FlexRender,\r\n  getCoreRowModel,\r\n  getExpandedRowModel,\r\n  getFilteredRowModel,\r\n  getPaginationRowModel,\r\n  getSortedRowModel,\r\n  useVueTable,\r\n} from \"@tanstack/vue-table\"\r\nimport { ArrowUpDown, ChevronDown } from \"lucide-vue-next\"\r\n\r\nimport { h, ref } from \"vue\"\r\nimport { cn, valueUpdater } from \"@/lib/utils\"\r\nimport { Button } from \"@/registry/default/ui/button\"\r\nimport { Checkbox } from \"@/registry/default/ui/checkbox\"\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuContent,\r\n  DropdownMenuTrigger,\r\n} from \"@/registry/default/ui/dropdown-menu\"\r\nimport { Input } from \"@/registry/default/ui/input\"\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/registry/default/ui/table\"\r\nimport DropdownAction from \"./DataTableDemoColumn.vue\"\r\n\r\nexport interface Payment {\r\n  id: string\r\n  amount: number\r\n  status: \"pending\" | \"processing\" | \"success\" | \"failed\"\r\n  email: string\r\n}\r\n\r\nconst data: Payment[] = [\r\n  {\r\n    id: \"m5gr84i9\",\r\n    amount: 316,\r\n    status: \"success\",\r\n    email: \"ken99@yahoo.com\",\r\n  },\r\n  {\r\n    id: \"3u1reuv4\",\r\n    amount: 242,\r\n    status: \"success\",\r\n    email: \"Abe45@gmail.com\",\r\n  },\r\n  {\r\n    id: \"derv1ws0\",\r\n    amount: 837,\r\n    status: \"processing\",\r\n    email: \"Monserrat44@gmail.com\",\r\n  },\r\n  {\r\n    id: \"5kma53ae\",\r\n    amount: 874,\r\n    status: \"success\",\r\n    email: \"Silas22@gmail.com\",\r\n  },\r\n  {\r\n    id: \"bhqecj4p\",\r\n    amount: 721,\r\n    status: \"failed\",\r\n    email: \"carmella@hotmail.com\",\r\n  },\r\n]\r\n\r\nconst columnHelper = createColumnHelper<Payment>()\r\n\r\nconst columns = [\r\n  columnHelper.display({\r\n    id: \"select\",\r\n    header: ({ table }) => h(Checkbox, {\r\n      \"modelValue\": table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && \"indeterminate\"),\r\n      \"onUpdate:modelValue\": value => table.toggleAllPageRowsSelected(!!value),\r\n      \"ariaLabel\": \"Select all\",\r\n    }),\r\n    cell: ({ row }) => {\r\n      return h(Checkbox, {\r\n        \"modelValue\": row.getIsSelected(),\r\n        \"onUpdate:modelValue\": value => row.toggleSelected(!!value),\r\n        \"ariaLabel\": \"Select row\",\r\n      })\r\n    },\r\n    enableSorting: false,\r\n    enableHiding: false,\r\n  }),\r\n  columnHelper.accessor(\"status\", {\r\n    enablePinning: true,\r\n    header: \"Status\",\r\n    cell: ({ row }) => h(\"div\", { class: \"capitalize\" }, row.getValue(\"status\")),\r\n  }),\r\n  columnHelper.accessor(\"email\", {\r\n    header: ({ column }) => {\r\n      return h(Button, {\r\n        variant: \"ghost\",\r\n        onClick: () => column.toggleSorting(column.getIsSorted() === \"asc\"),\r\n      }, () => [\"Email\", h(ArrowUpDown, { class: \"ml-2 h-4 w-4\" })])\r\n    },\r\n    cell: ({ row }) => h(\"div\", { class: \"lowercase\" }, row.getValue(\"email\")),\r\n  }),\r\n  columnHelper.accessor(\"amount\", {\r\n    header: () => h(\"div\", { class: \"text-right\" }, \"Amount\"),\r\n    cell: ({ row }) => {\r\n      const amount = Number.parseFloat(row.getValue(\"amount\"))\r\n\r\n      // Format the amount as a dollar amount\r\n      const formatted = new Intl.NumberFormat(\"en-US\", {\r\n        style: \"currency\",\r\n        currency: \"USD\",\r\n      }).format(amount)\r\n\r\n      return h(\"div\", { class: \"text-right font-medium\" }, formatted)\r\n    },\r\n  }),\r\n  columnHelper.display({\r\n    id: \"actions\",\r\n    enableHiding: false,\r\n    cell: ({ row }) => {\r\n      const payment = row.original\r\n\r\n      return h(\"div\", { class: \"relative\" }, h(DropdownAction, {\r\n        payment,\r\n        onExpand: row.toggleExpanded,\r\n      }))\r\n    },\r\n  }),\r\n]\r\n\r\nconst sorting = ref<SortingState>([])\r\nconst columnFilters = ref<ColumnFiltersState>([])\r\nconst columnVisibility = ref<VisibilityState>({})\r\nconst rowSelection = ref({})\r\nconst expanded = ref<ExpandedState>({})\r\n\r\nconst table = useVueTable({\r\n  data,\r\n  columns,\r\n  getCoreRowModel: getCoreRowModel(),\r\n  getPaginationRowModel: getPaginationRowModel(),\r\n  getSortedRowModel: getSortedRowModel(),\r\n  getFilteredRowModel: getFilteredRowModel(),\r\n  getExpandedRowModel: getExpandedRowModel(),\r\n  onSortingChange: updaterOrValue => valueUpdater(updaterOrValue, sorting),\r\n  onColumnFiltersChange: updaterOrValue => valueUpdater(updaterOrValue, columnFilters),\r\n  onColumnVisibilityChange: updaterOrValue => valueUpdater(updaterOrValue, columnVisibility),\r\n  onRowSelectionChange: updaterOrValue => valueUpdater(updaterOrValue, rowSelection),\r\n  onExpandedChange: updaterOrValue => valueUpdater(updaterOrValue, expanded),\r\n  state: {\r\n    get sorting() { return sorting.value },\r\n    get columnFilters() { return columnFilters.value },\r\n    get columnVisibility() { return columnVisibility.value },\r\n    get rowSelection() { return rowSelection.value },\r\n    get expanded() { return expanded.value },\r\n    columnPinning: {\r\n      left: [\"status\"],\r\n    },\r\n  },\r\n})\r\n</script>\r\n\r\n<template>\r\n  <div class=\"w-full\">\r\n    <div class=\"flex gap-2 items-center py-4\">\r\n      <Input\r\n        class=\"max-w-sm\"\r\n        placeholder=\"Filter emails...\"\r\n        :model-value=\"table.getColumn('email')?.getFilterValue() as string\"\r\n        @update:model-value=\" table.getColumn('email')?.setFilterValue($event)\"\r\n      />\r\n      <DropdownMenu>\r\n        <DropdownMenuTrigger as-child>\r\n          <Button variant=\"outline\" class=\"ml-auto\">\r\n            Columns <ChevronDown class=\"ml-2 h-4 w-4\" />\r\n          </Button>\r\n        </DropdownMenuTrigger>\r\n        <DropdownMenuContent align=\"end\">\r\n          <DropdownMenuCheckboxItem\r\n            v-for=\"column in table.getAllColumns().filter((column) => column.getCanHide())\"\r\n            :key=\"column.id\"\r\n            class=\"capitalize\"\r\n            :model-value=\"column.getIsVisible()\"\r\n            @update:model-value=\"(value) => {\r\n              column.toggleVisibility(!!value)\r\n            }\"\r\n          >\r\n            {{ column.id }}\r\n          </DropdownMenuCheckboxItem>\r\n        </DropdownMenuContent>\r\n      </DropdownMenu>\r\n    </div>\r\n    <div class=\"rounded-md border\">\r\n      <Table>\r\n        <TableHeader>\r\n          <TableRow v-for=\"headerGroup in table.getHeaderGroups()\" :key=\"headerGroup.id\">\r\n            <TableHead\r\n              v-for=\"header in headerGroup.headers\" :key=\"header.id\" :data-pinned=\"header.column.getIsPinned()\"\r\n              :class=\"cn(\r\n                { 'sticky bg-background/95': header.column.getIsPinned() },\r\n                header.column.getIsPinned() === 'left' ? 'left-0' : 'right-0',\r\n              )\"\r\n            >\r\n              <FlexRender v-if=\"!header.isPlaceholder\" :render=\"header.column.columnDef.header\" :props=\"header.getContext()\" />\r\n            </TableHead>\r\n          </TableRow>\r\n        </TableHeader>\r\n        <TableBody>\r\n          <template v-if=\"table.getRowModel().rows?.length\">\r\n            <template v-for=\"row in table.getRowModel().rows\" :key=\"row.id\">\r\n              <TableRow :data-state=\"row.getIsSelected() && 'selected'\">\r\n                <TableCell\r\n                  v-for=\"cell in row.getVisibleCells()\" :key=\"cell.id\" :data-pinned=\"cell.column.getIsPinned()\"\r\n                  :class=\"cn(\r\n                    { 'sticky bg-background/95': cell.column.getIsPinned() },\r\n                    cell.column.getIsPinned() === 'left' ? 'left-0' : 'right-0',\r\n                  )\"\r\n                >\r\n                  <FlexRender :render=\"cell.column.columnDef.cell\" :props=\"cell.getContext()\" />\r\n                </TableCell>\r\n              </TableRow>\r\n              <TableRow v-if=\"row.getIsExpanded()\">\r\n                <TableCell :colspan=\"row.getAllCells().length\">\r\n                  {{ row.original }}\r\n                </TableCell>\r\n              </TableRow>\r\n            </template>\r\n          </template>\r\n\r\n          <TableRow v-else>\r\n            <TableCell\r\n              :colspan=\"columns.length\"\r\n              class=\"h-24 text-center\"\r\n            >\r\n              No results.\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableBody>\r\n      </Table>\r\n    </div>\r\n\r\n    <div class=\"flex items-center justify-end space-x-2 py-4\">\r\n      <div class=\"flex-1 text-sm text-muted-foreground\">\r\n        {{ table.getFilteredSelectedRowModel().rows.length }} of\r\n        {{ table.getFilteredRowModel().rows.length }} row(s) selected.\r\n      </div>\r\n      <div class=\"space-x-2\">\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          :disabled=\"!table.getCanPreviousPage()\"\r\n          @click=\"table.previousPage()\"\r\n        >\r\n          Previous\r\n        </Button>\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          :disabled=\"!table.getCanNextPage()\"\r\n          @click=\"table.nextPage()\"\r\n        >\r\n          Next\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}
