{
  "name": "toast",
  "type": "registry:ui",
  "dependencies": [
    "reka-ui",
    "@vueuse/core"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "ui/toast/index.ts",
      "content": "import type { ToastRootProps } from \"reka-ui\"\r\nimport type { HTMLAttributes } from \"vue\"\r\n\r\nexport { default as Toast } from \"./Toast.vue\"\r\nexport { default as ToastAction } from \"./ToastAction.vue\"\r\nexport { default as ToastClose } from \"./ToastClose.vue\"\r\nexport { default as ToastDescription } from \"./ToastDescription.vue\"\r\nexport { default as Toaster } from \"./Toaster.vue\"\r\nexport { default as ToastProvider } from \"./ToastProvider.vue\"\r\nexport { default as ToastTitle } from \"./ToastTitle.vue\"\r\nexport { default as ToastViewport } from \"./ToastViewport.vue\"\r\nexport { toast, useToast } from \"./use-toast\"\r\n\r\nimport type { VariantProps } from \"class-variance-authority\"\r\nimport { cva } from \"class-variance-authority\"\r\n\r\nexport const toastVariants = cva(\r\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[--reka-toast-swipe-end-x] data-[swipe=move]:translate-x-[--reka-toast-swipe-move-x] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"border bg-background text-foreground\",\r\n        destructive:\r\n                    \"destructive group border-destructive bg-destructive text-destructive-foreground\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n    },\r\n  },\r\n)\r\n\r\ntype ToastVariants = VariantProps<typeof toastVariants>\r\n\r\nexport interface ToastProps extends ToastRootProps {\r\n  class?: HTMLAttributes[\"class\"]\r\n  variant?: ToastVariants[\"variant\"]\r\n  onOpenChange?: ((value: boolean) => void) | undefined\r\n}\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/toast/Toast.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { ToastRootEmits } from \"reka-ui\"\r\nimport type { ToastProps } from \".\"\r\nimport { reactiveOmit } from \"@vueuse/core\"\r\nimport { ToastRoot, useForwardPropsEmits } from \"reka-ui\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { toastVariants } from \".\"\r\n\r\nconst props = defineProps<ToastProps>()\r\n\r\nconst emits = defineEmits<ToastRootEmits>()\r\n\r\nconst delegatedProps = reactiveOmit(props, \"class\")\r\n\r\nconst forwarded = useForwardPropsEmits(delegatedProps, emits)\r\n</script>\r\n\r\n<template>\r\n  <ToastRoot\r\n    v-bind=\"forwarded\"\r\n    :class=\"cn(toastVariants({ variant }), props.class)\"\r\n    @update:open=\"onOpenChange\"\r\n  >\r\n    <slot />\r\n  </ToastRoot>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/toast/ToastAction.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { ToastActionProps } from \"reka-ui\"\r\nimport type { HTMLAttributes } from \"vue\"\r\nimport { reactiveOmit } from \"@vueuse/core\"\r\nimport { ToastAction } from \"reka-ui\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst props = defineProps<ToastActionProps & { class?: HTMLAttributes[\"class\"] }>()\r\n\r\nconst delegatedProps = reactiveOmit(props, \"class\")\r\n</script>\r\n\r\n<template>\r\n  <ToastAction v-bind=\"delegatedProps\" :class=\"cn('inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive', props.class)\">\r\n    <slot />\r\n  </ToastAction>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/toast/ToastClose.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { ToastCloseProps } from \"reka-ui\"\r\nimport type { HTMLAttributes } from \"vue\"\r\nimport { reactiveOmit } from \"@vueuse/core\"\r\nimport { X } from \"lucide-vue-next\"\r\nimport { ToastClose } from \"reka-ui\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst props = defineProps<ToastCloseProps & {\r\n  class?: HTMLAttributes[\"class\"]\r\n}>()\r\n\r\nconst delegatedProps = reactiveOmit(props, \"class\")\r\n</script>\r\n\r\n<template>\r\n  <ToastClose v-bind=\"delegatedProps\" :class=\"cn('absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600', props.class)\">\r\n    <X class=\"h-4 w-4\" />\r\n  </ToastClose>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/toast/ToastDescription.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { ToastDescriptionProps } from \"reka-ui\"\r\nimport type { HTMLAttributes } from \"vue\"\r\nimport { reactiveOmit } from \"@vueuse/core\"\r\nimport { ToastDescription } from \"reka-ui\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst props = defineProps<ToastDescriptionProps & { class?: HTMLAttributes[\"class\"] }>()\r\n\r\nconst delegatedProps = reactiveOmit(props, \"class\")\r\n</script>\r\n\r\n<template>\r\n  <ToastDescription :class=\"cn('text-sm opacity-90', props.class)\" v-bind=\"delegatedProps\">\r\n    <slot />\r\n  </ToastDescription>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/toast/Toaster.vue",
      "content": "<script setup lang=\"ts\">\r\nimport { isVNode } from \"vue\"\r\nimport { Toast, ToastClose, ToastDescription, ToastProvider, ToastTitle, ToastViewport } from \".\"\r\nimport { useToast } from \"./use-toast\"\r\n\r\nconst { toasts } = useToast()\r\n</script>\r\n\r\n<template>\r\n  <ToastProvider>\r\n    <Toast v-for=\"toast in toasts\" :key=\"toast.id\" v-bind=\"toast\">\r\n      <div class=\"grid gap-1\">\r\n        <ToastTitle v-if=\"toast.title\">\r\n          {{ toast.title }}\r\n        </ToastTitle>\r\n        <template v-if=\"toast.description\">\r\n          <ToastDescription v-if=\"isVNode(toast.description)\">\r\n            <component :is=\"toast.description\" />\r\n          </ToastDescription>\r\n          <ToastDescription v-else>\r\n            {{ toast.description }}\r\n          </ToastDescription>\r\n        </template>\r\n        <ToastClose />\r\n      </div>\r\n      <component :is=\"toast.action\" />\r\n    </Toast>\r\n    <ToastViewport />\r\n  </ToastProvider>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/toast/ToastProvider.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { ToastProviderProps } from \"reka-ui\"\r\nimport { ToastProvider } from \"reka-ui\"\r\n\r\nconst props = defineProps<ToastProviderProps>()\r\n</script>\r\n\r\n<template>\r\n  <ToastProvider v-bind=\"props\">\r\n    <slot />\r\n  </ToastProvider>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/toast/ToastTitle.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { ToastTitleProps } from \"reka-ui\"\r\nimport type { HTMLAttributes } from \"vue\"\r\nimport { reactiveOmit } from \"@vueuse/core\"\r\nimport { ToastTitle } from \"reka-ui\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst props = defineProps<ToastTitleProps & { class?: HTMLAttributes[\"class\"] }>()\r\n\r\nconst delegatedProps = reactiveOmit(props, \"class\")\r\n</script>\r\n\r\n<template>\r\n  <ToastTitle v-bind=\"delegatedProps\" :class=\"cn('text-sm font-semibold', props.class)\">\r\n    <slot />\r\n  </ToastTitle>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/toast/ToastViewport.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { ToastViewportProps } from \"reka-ui\"\r\nimport type { HTMLAttributes } from \"vue\"\r\nimport { reactiveOmit } from \"@vueuse/core\"\r\nimport { ToastViewport } from \"reka-ui\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst props = defineProps<ToastViewportProps & { class?: HTMLAttributes[\"class\"] }>()\r\n\r\nconst delegatedProps = reactiveOmit(props, \"class\")\r\n</script>\r\n\r\n<template>\r\n  <ToastViewport v-bind=\"delegatedProps\" :class=\"cn('fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]', props.class)\" />\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/toast/use-toast.ts",
      "content": "import type { Component, VNode } from \"vue\"\r\nimport type { ToastProps } from \".\"\r\nimport { computed, ref } from \"vue\"\r\n\r\nconst TOAST_LIMIT = 1\r\nconst TOAST_REMOVE_DELAY = 1000000\r\n\r\nexport type StringOrVNode\r\n  = | string\r\n    | VNode\r\n    | (() => VNode)\r\n\r\ntype ToasterToast = ToastProps & {\r\n  id: string\r\n  title?: string\r\n  description?: StringOrVNode\r\n  action?: Component\r\n}\r\n\r\nconst actionTypes = {\r\n  ADD_TOAST: \"ADD_TOAST\",\r\n  UPDATE_TOAST: \"UPDATE_TOAST\",\r\n  DISMISS_TOAST: \"DISMISS_TOAST\",\r\n  REMOVE_TOAST: \"REMOVE_TOAST\",\r\n} as const\r\n\r\nlet count = 0\r\n\r\nfunction genId() {\r\n  count = (count + 1) % Number.MAX_VALUE\r\n  return count.toString()\r\n}\r\n\r\ntype ActionType = typeof actionTypes\r\n\r\ntype Action\r\n  = | {\r\n    type: ActionType[\"ADD_TOAST\"]\r\n    toast: ToasterToast\r\n  }\r\n  | {\r\n    type: ActionType[\"UPDATE_TOAST\"]\r\n    toast: Partial<ToasterToast>\r\n  }\r\n  | {\r\n    type: ActionType[\"DISMISS_TOAST\"]\r\n    toastId?: ToasterToast[\"id\"]\r\n  }\r\n  | {\r\n    type: ActionType[\"REMOVE_TOAST\"]\r\n    toastId?: ToasterToast[\"id\"]\r\n  }\r\n\r\ninterface State {\r\n  toasts: ToasterToast[]\r\n}\r\n\r\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\r\n\r\nfunction addToRemoveQueue(toastId: string) {\r\n  if (toastTimeouts.has(toastId))\r\n    return\r\n\r\n  const timeout = setTimeout(() => {\r\n    toastTimeouts.delete(toastId)\r\n    dispatch({\r\n      type: actionTypes.REMOVE_TOAST,\r\n      toastId,\r\n    })\r\n  }, TOAST_REMOVE_DELAY)\r\n\r\n  toastTimeouts.set(toastId, timeout)\r\n}\r\n\r\nconst state = ref<State>({\r\n  toasts: [],\r\n})\r\n\r\nfunction dispatch(action: Action) {\r\n  switch (action.type) {\r\n    case actionTypes.ADD_TOAST:\r\n      state.value.toasts = [action.toast, ...state.value.toasts].slice(0, TOAST_LIMIT)\r\n      break\r\n\r\n    case actionTypes.UPDATE_TOAST:\r\n      state.value.toasts = state.value.toasts.map(t =>\r\n        t.id === action.toast.id ? { ...t, ...action.toast } : t,\r\n      )\r\n      break\r\n\r\n    case actionTypes.DISMISS_TOAST: {\r\n      const { toastId } = action\r\n\r\n      if (toastId) {\r\n        addToRemoveQueue(toastId)\r\n      }\r\n      else {\r\n        state.value.toasts.forEach((toast) => {\r\n          addToRemoveQueue(toast.id)\r\n        })\r\n      }\r\n\r\n      state.value.toasts = state.value.toasts.map(t =>\r\n        t.id === toastId || toastId === undefined\r\n          ? {\r\n              ...t,\r\n              open: false,\r\n            }\r\n          : t,\r\n      )\r\n      break\r\n    }\r\n\r\n    case actionTypes.REMOVE_TOAST:\r\n      if (action.toastId === undefined)\r\n        state.value.toasts = []\r\n      else\r\n        state.value.toasts = state.value.toasts.filter(t => t.id !== action.toastId)\r\n\r\n      break\r\n  }\r\n}\r\n\r\nfunction useToast() {\r\n  return {\r\n    toasts: computed(() => state.value.toasts),\r\n    toast,\r\n    dismiss: (toastId?: string) => dispatch({ type: actionTypes.DISMISS_TOAST, toastId }),\r\n  }\r\n}\r\n\r\ntype Toast = Omit<ToasterToast, \"id\">\r\n\r\nfunction toast(props: Toast) {\r\n  const id = genId()\r\n\r\n  const update = (props: ToasterToast) =>\r\n    dispatch({\r\n      type: actionTypes.UPDATE_TOAST,\r\n      toast: { ...props, id },\r\n    })\r\n\r\n  const dismiss = () => dispatch({ type: actionTypes.DISMISS_TOAST, toastId: id })\r\n\r\n  dispatch({\r\n    type: actionTypes.ADD_TOAST,\r\n    toast: {\r\n      ...props,\r\n      id,\r\n      open: true,\r\n      onOpenChange: (open: boolean) => {\r\n        if (!open)\r\n          dismiss()\r\n      },\r\n    },\r\n  })\r\n\r\n  return {\r\n    id,\r\n    dismiss,\r\n    update,\r\n  }\r\n}\r\n\r\nexport { toast, useToast }\r\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
