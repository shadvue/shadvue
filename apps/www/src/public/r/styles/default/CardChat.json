{
  "name": "CardChat",
  "type": "registry:example",
  "dependencies": [],
  "registryDependencies": [
    "avatar",
    "button",
    "card",
    "command",
    "dialog",
    "input",
    "tooltip"
  ],
  "files": [
    {
      "path": "examples/CardChat.vue",
      "content": "<script setup lang=\"ts\">\r\nimport { Check, Plus, Send } from \"lucide-vue-next\"\r\nimport { computed, ref } from \"vue\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/registry/default/ui/avatar\"\r\nimport { Button } from \"@/registry/default/ui/button\"\r\n\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardFooter,\r\n  CardHeader,\r\n} from \"@/registry/default/ui/card\"\r\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/registry/default/ui/command\"\r\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/registry/default/ui/dialog\"\r\nimport { Input } from \"@/registry/default/ui/input\"\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from \"@/registry/default/ui/tooltip\"\r\n\r\nconst input = ref(\"\")\r\nconst inputLength = computed(() => input.value.trim().length)\r\nconst users = ref([\r\n  {\r\n    name: \"Olivia Martin\",\r\n    email: \"m@example.com\",\r\n    avatar: \"/avatars/01.png\",\r\n  },\r\n  {\r\n    name: \"Isabella Nguyen\",\r\n    email: \"isabella.nguyen@email.com\",\r\n    avatar: \"/avatars/03.png\",\r\n  },\r\n  {\r\n    name: \"Emma Wilson\",\r\n    email: \"emma@example.com\",\r\n    avatar: \"/avatars/05.png\",\r\n  },\r\n  {\r\n    name: \"Jackson Lee\",\r\n    email: \"lee@example.com\",\r\n    avatar: \"/avatars/02.png\",\r\n  },\r\n  {\r\n    name: \"William Kim\",\r\n    email: \"will@email.com\",\r\n    avatar: \"/avatars/04.png\",\r\n  },\r\n])\r\n\r\ntype User = (typeof users.value)[number]\r\n\r\nconst messages = ref([\r\n  { role: \"agent\", content: \"Hi, how can I help you today?\" },\r\n  { role: \"user\", content: \"Hey, I'm having trouble with my account.\" },\r\n  { role: \"agent\", content: \"What seems to be the problem?\" },\r\n  { role: \"user\", content: \"I can't log in.\" },\r\n])\r\n\r\nconst open = ref(false)\r\nconst selectedUsers = ref<User[]>([])\r\n</script>\r\n\r\n<template>\r\n  <Card>\r\n    <CardHeader class=\"flex flex-row items-center justify-between\">\r\n      <div class=\"flex items-center space-x-4\">\r\n        <Avatar>\r\n          <AvatarImage src=\"/avatars/01.png\" alt=\"Image\" />\r\n          <AvatarFallback>OM</AvatarFallback>\r\n        </Avatar>\r\n        <div>\r\n          <p class=\"text-sm font-medium leading-none\">\r\n            Sofia Davis\r\n          </p>\r\n          <p class=\"text-sm text-muted-foreground\">\r\n            m@example.com\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <TooltipProvider>\r\n        <Tooltip :delay-duration=\"200\">\r\n          <TooltipTrigger as-child>\r\n            <Button\r\n              variant=\"outline\"\r\n              class=\"rounded-full p-2.5 flex items-center justify-center\"\r\n              @click=\"open = true\"\r\n            >\r\n              <Plus class=\"w-4 h-4\" />\r\n            </Button>\r\n          </TooltipTrigger>\r\n          <TooltipContent :side-offset=\"10\">\r\n            New message\r\n          </TooltipContent>\r\n        </Tooltip>\r\n      </TooltipProvider>\r\n    </CardHeader>\r\n    <CardContent>\r\n      <div class=\"space-y-4\">\r\n        <div\r\n          v-for=\"(message, index) in messages\"\r\n          :key=\"index\"\r\n          :class=\"cn(\r\n            'flex w-max max-w-[75%] flex-col gap-2 rounded-lg px-3 py-2 text-sm',\r\n            message.role === 'user' ? 'ml-auto bg-primary text-primary-foreground' : 'bg-muted',\r\n          )\"\r\n        >\r\n          {{ message.content }}\r\n        </div>\r\n      </div>\r\n    </CardContent>\r\n    <CardFooter>\r\n      <form\r\n        class=\"flex w-full items-center space-x-2\"\r\n        @submit.prevent=\"() => {\r\n          if (inputLength === 0) return\r\n          messages.push({\r\n            role: 'user',\r\n            content: input,\r\n          })\r\n          input = ''\r\n        }\"\r\n      >\r\n        <Input v-model=\"input\" placeholder=\"Type a message...\" class=\"flex-1\" />\r\n        <Button class=\"p-2.5 flex items-center justify-center\" :disabled=\"inputLength === 0\">\r\n          <Send class=\"w-4 h-4\" />\r\n          <span class=\"sr-only\">Send</span>\r\n        </Button>\r\n      </form>\r\n    </CardFooter>\r\n  </Card>\r\n\r\n  <Dialog v-model:open=\"open\">\r\n    <DialogContent class=\"gap-0 p-0 outline-none\">\r\n      <DialogHeader class=\"px-4 pb-4 pt-5\">\r\n        <DialogTitle>New message</DialogTitle>\r\n        <DialogDescription>\r\n          Invite a user to this thread. This will create a new group\r\n          message.\r\n        </DialogDescription>\r\n      </DialogHeader>\r\n      <Command class=\"overflow-hidden rounded-t-none border-t\">\r\n        <CommandInput placeholder=\"Search user...\" />\r\n        <CommandList>\r\n          <CommandEmpty>No users found.</CommandEmpty>\r\n          <CommandGroup class=\"p-2\">\r\n            <CommandItem\r\n              v-for=\"user in users\"\r\n              :key=\"user.email\"\r\n              :value=\"user\"\r\n              class=\"flex items-center px-2\"\r\n              @select=\"() => {\r\n                const index = selectedUsers.findIndex(u => u === user)\r\n                if (index !== -1) {\r\n                  selectedUsers.splice(index, 1)\r\n                }\r\n                else {\r\n                  selectedUsers.push(user)\r\n                }\r\n              }\"\r\n            >\r\n              <Avatar>\r\n                <AvatarImage :src=\"user.avatar\" alt=\"Image\" />\r\n                <AvatarFallback>{{ user.name[0] }}</AvatarFallback>\r\n              </Avatar>\r\n              <div class=\"ml-2\">\r\n                <p class=\"text-sm font-medium leading-none\">\r\n                  {{ user.name }}\r\n                </p>\r\n                <p class=\"text-sm text-muted-foreground\">\r\n                  {{ user.email }}\r\n                </p>\r\n              </div>\r\n              <Check v-if=\"selectedUsers.includes(user)\" class=\"ml-auto flex h-5 w-5 text-primary\" />\r\n            </CommandItem>\r\n          </CommandGroup>\r\n        </CommandList>\r\n      </Command>\r\n      <DialogFooter class=\"flex items-center border-t p-4 sm:justify-between\">\r\n        <div v-if=\"selectedUsers.length > 0\" class=\"flex -space-x-2 overflow-hidden\">\r\n          <Avatar\r\n            v-for=\"user in selectedUsers\"\r\n            :key=\"user.email\"\r\n            class=\"inline-block border-2 border-background\"\r\n          >\r\n            <AvatarImage :src=\"user.avatar\" />\r\n            <AvatarFallback>{{ user.name[0] }}</AvatarFallback>\r\n          </Avatar>\r\n        </div>\r\n\r\n        <p v-else class=\"text-sm text-muted-foreground\">\r\n          Select users to add to this thread.\r\n        </p>\r\n\r\n        <Button\r\n          :disabled=\"selectedUsers.length < 2\"\r\n          @click=\"open = false\"\r\n        >\r\n          Continue\r\n        </Button>\r\n      </DialogFooter>\r\n    </DialogContent>\r\n  </Dialog>\r\n</template>\r\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}
