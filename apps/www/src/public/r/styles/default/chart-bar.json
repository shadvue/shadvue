{
  "name": "chart-bar",
  "type": "registry:ui",
  "dependencies": [
    "@unovis/vue",
    "@unovis/ts",
    "@vueuse/core"
  ],
  "registryDependencies": [
    "chart"
  ],
  "files": [
    {
      "path": "ui/chart-bar/BarChart.vue",
      "content": "<script setup lang=\"ts\" generic=\"T extends Record<string, any>\">\r\nimport type { BulletLegendItemInterface } from \"@unovis/ts\"\r\nimport type { Component } from \"vue\"\r\nimport type { BaseChartProps } from \".\"\r\nimport { Axis, GroupedBar, StackedBar } from \"@unovis/ts\"\r\nimport { VisAxis, VisGroupedBar, VisStackedBar, VisXYContainer } from \"@unovis/vue\"\r\nimport { useMounted } from \"@vueuse/core\"\nimport { computed, ref } from \"vue\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { ChartCrosshair, ChartLegend, defaultColors } from \"@/registry/default/ui/chart\"\r\n\r\nconst props = withDefaults(defineProps<BaseChartProps<T> & {\r\n  /**\r\n   * Render custom tooltip component.\r\n   */\r\n  customTooltip?: Component\r\n  /**\r\n   * Change the type of the chart\r\n   * @default \"grouped\"\r\n   */\r\n  type?: \"stacked\" | \"grouped\"\r\n  /**\r\n   * Rounded bar corners\r\n   * @default 0\r\n   */\r\n  roundedCorners?: number\r\n}>(), {\r\n  type: \"grouped\",\r\n  margin: () => ({ top: 0, bottom: 0, left: 0, right: 0 }),\r\n  filterOpacity: 0.2,\r\n  roundedCorners: 0,\r\n  showXAxis: true,\r\n  showYAxis: true,\r\n  showTooltip: true,\r\n  showLegend: true,\r\n  showGridLine: true,\r\n})\r\nconst emits = defineEmits<{\r\n  legendItemClick: [d: BulletLegendItemInterface, i: number]\r\n}>()\r\n\r\ntype KeyOfT = Extract<keyof T, string>\r\ntype Data = typeof props.data[number]\r\n\r\nconst index = computed(() => props.index as KeyOfT)\r\nconst colors = computed(() => props.colors?.length ? props.colors : defaultColors(props.categories.length))\r\nconst legendItems = ref<BulletLegendItemInterface[]>(props.categories.map((category, i) => ({\r\n  name: category,\r\n  color: colors.value[i],\r\n  inactive: false,\r\n})))\r\n\r\nconst isMounted = useMounted()\r\n\r\nfunction handleLegendItemClick(d: BulletLegendItemInterface, i: number) {\r\n  emits(\"legendItemClick\", d, i)\r\n}\r\n\r\nconst VisBarComponent = computed(() => props.type === \"grouped\" ? VisGroupedBar : VisStackedBar)\r\nconst selectorsBar = computed(() => props.type === \"grouped\" ? GroupedBar.selectors.bar : StackedBar.selectors.bar)\r\n</script>\r\n\r\n<template>\r\n  <div :class=\"cn('w-full h-[400px] flex flex-col items-end', $attrs.class ?? '')\">\r\n    <ChartLegend v-if=\"showLegend\" v-model:items=\"legendItems\" @legend-item-click=\"handleLegendItemClick\" />\r\n\r\n    <VisXYContainer\r\n      :data=\"data\"\r\n      :style=\"{ height: isMounted ? '100%' : 'auto' }\"\r\n      :margin=\"margin\"\r\n    >\r\n      <ChartCrosshair v-if=\"showTooltip\" :colors=\"colors\" :items=\"legendItems\" :custom-tooltip=\"customTooltip\" :index=\"index\" />\r\n\r\n      <VisBarComponent\r\n        :x=\"(d: Data, i: number) => i\"\r\n        :y=\"categories.map(category => (d: Data) => d[category]) \"\r\n        :color=\"colors\"\r\n        :rounded-corners=\"roundedCorners\"\r\n        :bar-padding=\"0.05\"\r\n        :attributes=\"{\r\n          [selectorsBar]: {\r\n            opacity: (d: Data, i:number) => {\r\n              const pos = i % categories.length\r\n              return legendItems[pos]?.inactive ? filterOpacity : 1\r\n            },\r\n          },\r\n        }\"\r\n      />\r\n\r\n      <VisAxis\r\n        v-if=\"showXAxis\"\r\n        type=\"x\"\r\n        :tick-format=\"xFormatter ?? ((v: number) => data[v]?.[index])\"\r\n        :grid-line=\"false\"\r\n        :tick-line=\"false\"\r\n        tick-text-color=\"hsl(var(--vis-text-color))\"\r\n      />\r\n      <VisAxis\r\n        v-if=\"showYAxis\"\r\n        type=\"y\"\r\n        :tick-line=\"false\"\r\n        :tick-format=\"yFormatter\"\r\n        :domain-line=\"false\"\r\n        :grid-line=\"showGridLine\"\r\n        :attributes=\"{\r\n          [Axis.selectors.grid]: {\r\n            class: 'text-muted',\r\n          },\r\n        }\"\r\n        tick-text-color=\"hsl(var(--vis-text-color))\"\r\n      />\r\n\r\n      <slot />\r\n    </VisXYContainer>\r\n  </div>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/chart-bar/index.ts",
      "content": "export { default as BarChart } from \"./BarChart.vue\"\r\n\r\nimport type { Spacing } from \"@unovis/ts\"\r\n\r\ntype KeyOf<T extends Record<string, any>> = Extract<keyof T, string>\r\n\r\nexport interface BaseChartProps<T extends Record<string, any>> {\r\n  /**\r\n   * The source data, in which each entry is a dictionary.\r\n   */\r\n  data: T[]\r\n  /**\r\n   * Select the categories from your data. Used to populate the legend and toolip.\r\n   */\r\n  categories: KeyOf<T>[]\r\n  /**\r\n   * Sets the key to map the data to the axis.\r\n   */\r\n  index: KeyOf<T>\r\n  /**\r\n   * Change the default colors.\r\n   */\r\n  colors?: string[]\r\n  /**\r\n   * Margin of each the container\r\n   */\r\n  margin?: Spacing\r\n  /**\r\n   * Change the opacity of the non-selected field\r\n   * @default 0.2\r\n   */\r\n  filterOpacity?: number\r\n  /**\r\n   * Function to format X label\r\n   */\r\n  xFormatter?: (tick: number | Date, i: number, ticks: number[] | Date[]) => string\r\n  /**\r\n   * Function to format Y label\r\n   */\r\n  yFormatter?: (tick: number | Date, i: number, ticks: number[] | Date[]) => string\r\n  /**\r\n   * Controls the visibility of the X axis.\r\n   * @default true\r\n   */\r\n  showXAxis?: boolean\r\n  /**\r\n   * Controls the visibility of the Y axis.\r\n   * @default true\r\n   */\r\n  showYAxis?: boolean\r\n  /**\r\n   * Controls the visibility of tooltip.\r\n   * @default true\r\n   */\r\n  showTooltip?: boolean\r\n  /**\r\n   * Controls the visibility of legend.\r\n   * @default true\r\n   */\r\n  showLegend?: boolean\r\n  /**\r\n   * Controls the visibility of gridline.\r\n   * @default true\r\n   */\r\n  showGridLine?: boolean\r\n}\r\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
