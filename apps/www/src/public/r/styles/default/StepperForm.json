{
  "name": "StepperForm",
  "type": "registry:example",
  "dependencies": [],
  "registryDependencies": [
    "button",
    "form",
    "input",
    "select",
    "stepper",
    "toast"
  ],
  "files": [
    {
      "path": "examples/StepperForm.vue",
      "content": "<script setup lang=\"ts\">\r\nimport { toTypedSchema } from \"@vee-validate/zod\"\r\nimport { Check, Circle, Dot } from \"lucide-vue-next\"\r\nimport { h, ref } from \"vue\"\r\nimport * as z from \"zod\"\r\nimport { Button } from \"@/registry/default/ui/button\"\r\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/registry/default/ui/form\"\r\nimport { Input } from \"@/registry/default/ui/input\"\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectGroup,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/registry/default/ui/select\"\r\nimport { Stepper, StepperDescription, StepperItem, StepperSeparator, StepperTitle, StepperTrigger } from \"@/registry/default/ui/stepper\"\r\nimport { toast } from \"@/registry/default/ui/toast\"\r\n\r\nconst formSchema = [\r\n  z.object({\r\n    fullName: z.string(),\r\n    email: z.string().email(),\r\n  }),\r\n  z.object({\r\n    password: z.string().min(2).max(50),\r\n    confirmPassword: z.string(),\r\n  }).refine(\r\n    (values) => {\r\n      return values.password === values.confirmPassword\r\n    },\r\n    {\r\n      message: \"Passwords must match!\",\r\n      path: [\"confirmPassword\"],\r\n    },\r\n  ),\r\n  z.object({\r\n    favoriteDrink: z.union([z.literal(\"coffee\"), z.literal(\"tea\"), z.literal(\"soda\")]),\r\n  }),\r\n]\r\n\r\nconst stepIndex = ref(1)\r\nconst steps = [\r\n  {\r\n    step: 1,\r\n    title: \"Your details\",\r\n    description: \"Provide your name and email\",\r\n  },\r\n  {\r\n    step: 2,\r\n    title: \"Your password\",\r\n    description: \"Choose a password\",\r\n  },\r\n  {\r\n    step: 3,\r\n    title: \"Your Favorite Drink\",\r\n    description: \"Choose a drink\",\r\n  },\r\n]\r\n\r\nfunction onSubmit(values: any) {\r\n  toast({\r\n    title: \"You submitted the following values:\",\r\n    description: h(\"pre\", { class: \"mt-2 w-[340px] rounded-md bg-slate-950 p-4\" }, h(\"code\", { class: \"text-white\" }, JSON.stringify(values, null, 2))),\r\n  })\r\n}\r\n</script>\r\n\r\n<template>\r\n  <Form\r\n    v-slot=\"{ meta, values, validate }\"\r\n    as=\"\" keep-values :validation-schema=\"toTypedSchema(formSchema[stepIndex - 1])\"\r\n  >\r\n    <Stepper v-slot=\"{ isNextDisabled, isPrevDisabled, nextStep, prevStep }\" v-model=\"stepIndex\" class=\"block w-full\">\r\n      <form\r\n        @submit=\"(e) => {\r\n          e.preventDefault()\r\n          validate()\r\n\r\n          if (stepIndex === steps.length && meta.valid) {\r\n            onSubmit(values)\r\n          }\r\n        }\"\r\n      >\r\n        <div class=\"flex w-full flex-start gap-2\">\r\n          <StepperItem\r\n            v-for=\"step in steps\"\r\n            :key=\"step.step\"\r\n            v-slot=\"{ state }\"\r\n            class=\"relative flex w-full flex-col items-center justify-center\"\r\n            :step=\"step.step\"\r\n          >\r\n            <StepperSeparator\r\n              v-if=\"step.step !== steps[steps.length - 1].step\"\r\n              class=\"absolute left-[calc(50%+20px)] right-[calc(-50%+10px)] top-5 block h-0.5 shrink-0 rounded-full bg-muted group-data-[state=completed]:bg-primary\"\r\n            />\r\n\r\n            <StepperTrigger as-child>\r\n              <Button\r\n                :variant=\"state === 'completed' || state === 'active' ? 'default' : 'outline'\"\r\n                size=\"icon\"\r\n                class=\"z-10 rounded-full shrink-0\"\r\n                :class=\"[state === 'active' && 'ring-2 ring-ring ring-offset-2 ring-offset-background']\"\r\n                :disabled=\"state !== 'completed' && !meta.valid\"\r\n              >\r\n                <Check v-if=\"state === 'completed'\" class=\"size-5\" />\r\n                <Circle v-if=\"state === 'active'\" />\r\n                <Dot v-if=\"state === 'inactive'\" />\r\n              </Button>\r\n            </StepperTrigger>\r\n\r\n            <div class=\"mt-5 flex flex-col items-center text-center\">\r\n              <StepperTitle\r\n                :class=\"[state === 'active' && 'text-primary']\"\r\n                class=\"text-sm font-semibold transition lg:text-base\"\r\n              >\r\n                {{ step.title }}\r\n              </StepperTitle>\r\n              <StepperDescription\r\n                :class=\"[state === 'active' && 'text-primary']\"\r\n                class=\"sr-only text-xs text-muted-foreground transition md:not-sr-only lg:text-sm\"\r\n              >\r\n                {{ step.description }}\r\n              </StepperDescription>\r\n            </div>\r\n          </StepperItem>\r\n        </div>\r\n\r\n        <div class=\"flex flex-col gap-4 mt-4\">\r\n          <template v-if=\"stepIndex === 1\">\r\n            <FormField v-slot=\"{ componentField }\" name=\"fullName\">\r\n              <FormItem>\r\n                <FormLabel>Full Name</FormLabel>\r\n                <FormControl>\r\n                  <Input type=\"text\" v-bind=\"componentField\" />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            </FormField>\r\n\r\n            <FormField v-slot=\"{ componentField }\" name=\"email\">\r\n              <FormItem>\r\n                <FormLabel>Email</FormLabel>\r\n                <FormControl>\r\n                  <Input type=\"email \" v-bind=\"componentField\" />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            </FormField>\r\n          </template>\r\n\r\n          <template v-if=\"stepIndex === 2\">\r\n            <FormField v-slot=\"{ componentField }\" name=\"password\">\r\n              <FormItem>\r\n                <FormLabel>Password</FormLabel>\r\n                <FormControl>\r\n                  <Input type=\"password\" v-bind=\"componentField\" />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            </FormField>\r\n\r\n            <FormField v-slot=\"{ componentField }\" name=\"confirmPassword\">\r\n              <FormItem>\r\n                <FormLabel>Confirm Password</FormLabel>\r\n                <FormControl>\r\n                  <Input type=\"password\" v-bind=\"componentField\" />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            </FormField>\r\n          </template>\r\n\r\n          <template v-if=\"stepIndex === 3\">\r\n            <FormField v-slot=\"{ componentField }\" name=\"favoriteDrink\">\r\n              <FormItem>\r\n                <FormLabel>Drink</FormLabel>\r\n\r\n                <Select v-bind=\"componentField\">\r\n                  <FormControl>\r\n                    <SelectTrigger>\r\n                      <SelectValue placeholder=\"Select a drink\" />\r\n                    </SelectTrigger>\r\n                  </FormControl>\r\n                  <SelectContent>\r\n                    <SelectGroup>\r\n                      <SelectItem value=\"coffee\">\r\n                        Coffe\r\n                      </SelectItem>\r\n                      <SelectItem value=\"tea\">\r\n                        Tea\r\n                      </SelectItem>\r\n                      <SelectItem value=\"soda\">\r\n                        Soda\r\n                      </SelectItem>\r\n                    </SelectGroup>\r\n                  </SelectContent>\r\n                </Select>\r\n                <FormMessage />\r\n              </FormItem>\r\n            </FormField>\r\n          </template>\r\n        </div>\r\n\r\n        <div class=\"flex items-center justify-between mt-4\">\r\n          <Button :disabled=\"isPrevDisabled\" variant=\"outline\" size=\"sm\" @click=\"prevStep()\">\r\n            Back\r\n          </Button>\r\n          <div class=\"flex items-center gap-3\">\r\n            <Button v-if=\"stepIndex !== 3\" :type=\"meta.valid ? 'button' : 'submit'\" :disabled=\"isNextDisabled\" size=\"sm\" @click=\"meta.valid && nextStep()\">\r\n              Next\r\n            </Button>\r\n            <Button\r\n              v-if=\"stepIndex === 3\" size=\"sm\" type=\"submit\"\r\n            >\r\n              Submit\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </Stepper>\r\n  </Form>\r\n</template>\r\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}
