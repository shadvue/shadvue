{
  "name": "carousel",
  "type": "registry:ui",
  "dependencies": [
    "embla-carousel-vue",
    "@vueuse/core"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "ui/carousel/Carousel.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { CarouselEmits, CarouselProps, WithClassAsProps } from \"./interface\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { useProvideCarousel } from \"./useCarousel\"\r\n\r\nconst props = withDefaults(defineProps<CarouselProps & WithClassAsProps>(), {\r\n  orientation: \"horizontal\",\r\n})\r\n\r\nconst emits = defineEmits<CarouselEmits>()\r\n\r\nconst { canScrollNext, canScrollPrev, carouselApi, carouselRef, orientation, scrollNext, scrollPrev } = useProvideCarousel(props, emits)\r\n\r\ndefineExpose({\r\n  canScrollNext,\r\n  canScrollPrev,\r\n  carouselApi,\r\n  carouselRef,\r\n  orientation,\r\n  scrollNext,\r\n  scrollPrev,\r\n})\r\n\r\nfunction onKeyDown(event: KeyboardEvent) {\r\n  const prevKey = props.orientation === \"vertical\" ? \"ArrowUp\" : \"ArrowLeft\"\r\n  const nextKey = props.orientation === \"vertical\" ? \"ArrowDown\" : \"ArrowRight\"\r\n\r\n  if (event.key === prevKey) {\r\n    event.preventDefault()\r\n    scrollPrev()\r\n\r\n    return\r\n  }\r\n\r\n  if (event.key === nextKey) {\r\n    event.preventDefault()\r\n    scrollNext()\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    data-slot=\"carousel\"\r\n    :class=\"cn('relative', props.class)\"\r\n    role=\"region\"\r\n    aria-roledescription=\"carousel\"\r\n    tabindex=\"0\"\r\n    @keydown=\"onKeyDown\"\r\n  >\r\n    <slot :can-scroll-next :can-scroll-prev :carousel-api :carousel-ref :orientation :scroll-next :scroll-prev />\r\n  </div>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/carousel/CarouselContent.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { WithClassAsProps } from \"./interface\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { useCarousel } from \"./useCarousel\"\r\n\r\ndefineOptions({\r\n  inheritAttrs: false,\r\n})\r\n\r\nconst props = defineProps<WithClassAsProps>()\r\n\r\nconst { carouselRef, orientation } = useCarousel()\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    ref=\"carouselRef\"\r\n    data-slot=\"carousel-content\"\r\n    class=\"overflow-hidden\"\r\n  >\r\n    <div\r\n      :class=\"\r\n        cn(\r\n          'flex',\r\n          orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',\r\n          props.class,\r\n        )\"\r\n      v-bind=\"$attrs\"\r\n    >\r\n      <slot />\r\n    </div>\r\n  </div>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/carousel/CarouselItem.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { WithClassAsProps } from \"./interface\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { useCarousel } from \"./useCarousel\"\r\n\r\nconst props = defineProps<WithClassAsProps>()\r\n\r\nconst { orientation } = useCarousel()\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    data-slot=\"carousel-item\"\r\n    role=\"group\"\r\n    aria-roledescription=\"slide\"\r\n    :class=\"cn(\r\n      'min-w-0 shrink-0 grow-0 basis-full',\r\n      orientation === 'horizontal' ? 'pl-4' : 'pt-4',\r\n      props.class,\r\n    )\"\r\n  >\r\n    <slot />\r\n  </div>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/carousel/CarouselNext.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { WithClassAsProps } from \"./interface\"\r\nimport type { ButtonVariants } from \"@/registry/new-york/ui/button\"\r\nimport { ArrowRight } from \"lucide-vue-next\"\r\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/registry/new-york/ui/button\"\r\nimport { useCarousel } from \"./useCarousel\"\r\n\r\nconst props = withDefaults(defineProps<{\r\n  variant?: ButtonVariants[\"variant\"]\r\n  size?: ButtonVariants[\"size\"]\r\n}\r\n& WithClassAsProps>(), {\r\n  variant: \"outline\",\r\n  size: \"icon\",\r\n})\r\n\r\nconst { orientation, canScrollNext, scrollNext } = useCarousel()\r\n</script>\r\n\r\n<template>\r\n  <Button\r\n    data-slot=\"carousel-next\"\r\n    :disabled=\"!canScrollNext\"\r\n    :class=\"cn(\r\n      'absolute size-8 rounded-full',\r\n      orientation === 'horizontal'\r\n        ? 'top-1/2 -right-12 -translate-y-1/2'\r\n        : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',\r\n      props.class,\r\n    )\"\r\n    :variant=\"variant\"\r\n    :size=\"size\"\r\n    @click=\"scrollNext\"\r\n  >\r\n    <slot>\r\n      <ArrowRight />\r\n      <span class=\"sr-only\">Next Slide</span>\r\n    </slot>\r\n  </Button>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/carousel/CarouselPrevious.vue",
      "content": "<script setup lang=\"ts\">\r\nimport type { WithClassAsProps } from \"./interface\"\r\nimport type { ButtonVariants } from \"@/registry/new-york/ui/button\"\r\nimport { ArrowLeft } from \"lucide-vue-next\"\r\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/registry/new-york/ui/button\"\r\nimport { useCarousel } from \"./useCarousel\"\r\n\r\nconst props = withDefaults(defineProps<{\r\n  variant?: ButtonVariants[\"variant\"]\r\n  size?: ButtonVariants[\"size\"]\r\n}\r\n& WithClassAsProps>(), {\r\n  variant: \"outline\",\r\n  size: \"icon\",\r\n})\r\n\r\nconst { orientation, canScrollPrev, scrollPrev } = useCarousel()\r\n</script>\r\n\r\n<template>\r\n  <Button\r\n    data-slot=\"carousel-previous\"\r\n    :disabled=\"!canScrollPrev\"\r\n    :class=\"cn(\r\n      'absolute size-8 rounded-full',\r\n      orientation === 'horizontal'\r\n        ? 'top-1/2 -left-12 -translate-y-1/2'\r\n        : '-top-12 left-1/2 -translate-x-1/2 rotate-90',\r\n      props.class,\r\n    )\"\r\n    :variant=\"variant\"\r\n    :size=\"size\"\r\n    @click=\"scrollPrev\"\r\n  >\r\n    <slot>\r\n      <ArrowLeft />\r\n      <span class=\"sr-only\">Previous Slide</span>\r\n    </slot>\r\n  </Button>\r\n</template>\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/carousel/index.ts",
      "content": "export { default as Carousel } from \"./Carousel.vue\"\r\nexport { default as CarouselContent } from \"./CarouselContent.vue\"\r\nexport { default as CarouselItem } from \"./CarouselItem.vue\"\r\nexport { default as CarouselNext } from \"./CarouselNext.vue\"\r\nexport { default as CarouselPrevious } from \"./CarouselPrevious.vue\"\r\nexport type {\r\n  UnwrapRefCarouselApi as CarouselApi,\r\n} from \"./interface\"\r\n\r\nexport { useCarousel } from \"./useCarousel\"\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/carousel/interface.ts",
      "content": "import type useEmblaCarousel from \"embla-carousel-vue\"\r\nimport type {\r\n  EmblaCarouselVueType,\r\n} from \"embla-carousel-vue\"\r\nimport type { HTMLAttributes, UnwrapRef } from \"vue\"\r\n\r\ntype CarouselApi = EmblaCarouselVueType[1]\r\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\r\ntype CarouselOptions = UseCarouselParameters[0]\r\ntype CarouselPlugin = UseCarouselParameters[1]\r\n\r\nexport type UnwrapRefCarouselApi = UnwrapRef<CarouselApi>\r\n\r\nexport interface CarouselProps {\r\n  opts?: CarouselOptions\r\n  plugins?: CarouselPlugin\r\n  orientation?: \"horizontal\" | \"vertical\"\r\n}\r\n\r\nexport interface CarouselEmits {\r\n  (e: \"init-api\", payload: UnwrapRefCarouselApi): void\r\n}\r\n\r\nexport interface WithClassAsProps {\r\n  class?: HTMLAttributes[\"class\"]\r\n}\r\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "ui/carousel/useCarousel.ts",
      "content": "import type { UnwrapRefCarouselApi as CarouselApi, CarouselEmits, CarouselProps } from \"./interface\"\r\nimport { createInjectionState } from \"@vueuse/core\"\r\nimport emblaCarouselVue from \"embla-carousel-vue\"\r\nimport { onMounted, ref } from \"vue\"\r\n\r\nconst [useProvideCarousel, useInjectCarousel] = createInjectionState(\r\n  ({\r\n    opts,\r\n    orientation,\r\n    plugins,\r\n  }: CarouselProps, emits: CarouselEmits) => {\r\n    const [emblaNode, emblaApi] = emblaCarouselVue({\r\n      ...opts,\r\n      axis: orientation === \"horizontal\" ? \"x\" : \"y\",\r\n    }, plugins)\r\n\r\n    function scrollPrev() {\r\n      emblaApi.value?.scrollPrev()\r\n    }\r\n    function scrollNext() {\r\n      emblaApi.value?.scrollNext()\r\n    }\r\n\r\n    const canScrollNext = ref(false)\r\n    const canScrollPrev = ref(false)\r\n\r\n    function onSelect(api: CarouselApi) {\r\n      canScrollNext.value = api?.canScrollNext() || false\r\n      canScrollPrev.value = api?.canScrollPrev() || false\r\n    }\r\n\r\n    onMounted(() => {\r\n      if (!emblaApi.value)\r\n        return\r\n\r\n      emblaApi.value?.on(\"init\", onSelect)\r\n      emblaApi.value?.on(\"reInit\", onSelect)\r\n      emblaApi.value?.on(\"select\", onSelect)\r\n\r\n      emits(\"init-api\", emblaApi.value)\r\n    })\r\n\r\n    return { carouselRef: emblaNode, carouselApi: emblaApi, canScrollPrev, canScrollNext, scrollPrev, scrollNext, orientation }\r\n  },\r\n)\r\n\r\nfunction useCarousel() {\r\n  const carouselState = useInjectCarousel()\r\n\r\n  if (!carouselState)\r\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\r\n\r\n  return carouselState\r\n}\r\n\r\nexport { useCarousel, useProvideCarousel }\r\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}
